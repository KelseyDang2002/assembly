     1                                  ; Program Name: Random Numbers
     2                                  ; Subject: CPSC 240-03 <Strings>
     3                                  ; This program demonstrates non-deterministic random number generation.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Random Numbers
    19                                  ;   Program Languages: C, Assembly X86-64, bash
    20                                  ;   Due Date: ---
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This file gets called by executive.asm and normalizes the array between the range 1.0 and 2.0.
    25                                  
    26                                  ; File Information
    27                                  ;   Filename: isnan.asm
    28                                  ;   Language: Assembly X86-64
    29                                  ;   Compile: nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    30                                  ;   Link: gcc -m64 -fno-pie -no-pie -std=c17 -o a.out main.o executive.o fill_random_array.o show_array.o isnan.o
    31                                  
    32                                  global isnan
    33                                  extern rdrand
    34                                  
    35                                  segment .data
    36                                  
    37                                  segment .bss
    38                                  align 64
    39 00000000 <res 00000340>          backuparea resb 832
    40                                  
    41                                  segment .text
    42                                  isnan:
    43                                  
    44                                  ; ============= Backup GPRs ============================
    45 00000000 55                      push rbp
    46 00000001 4889E5                  mov rbp, rsp
    47 00000004 53                      push rbx
    48 00000005 51                      push rcx
    49 00000006 52                      push rdx
    50 00000007 56                      push rsi
    51 00000008 57                      push rdi
    52 00000009 4150                    push r8
    53 0000000B 4151                    push r9
    54 0000000D 4152                    push r10
    55 0000000F 4153                    push r11
    56 00000011 4154                    push r12
    57 00000013 4155                    push r13
    58 00000015 4156                    push r14
    59 00000017 4157                    push r15
    60 00000019 9C                      pushf
    61                                  
    62                                  ; =============== xsave =================================
    63 0000001A B807000000              mov rax, 7
    64 0000001F BA00000000              mov rdx, 0
    65 00000024 0FAE2425[00000000]      xsave [backuparea]
    66                                  
    67                                  ; =============== isnan =================================
    68 0000002C 4D31ED                  xor r13, r13            ; index starting at 0
    69 0000002F 4989FE                  mov r14, rdi            ; num_array
    70 00000032 4989F7                  mov r15, rsi            ; size of num_array
    71                                  
    72                                  beginloop:
    73 00000035 4D39FD                    cmp r13, r15          ; if index reaches size of num_array
    74 00000038 7D22                      jge endloop           ; jump to end of loop
    75                                  
    76 0000003A 4F8B24EE                  mov r12, [r14+8*r13]
    77 0000003E 49C1E40C                  shl r12, 12           ; shift hex number right 3 places left
    78 00000042 49C1EC0C                  shr r12, 12           ; shift hex number right 3 places right
    79 00000046 48B8000000000000F0-       mov rax, 0x3FF0000000000000
    79 0000004F 3F                 
    80 00000050 4909C4                    or r12, rax           ; mask the hex number
    81 00000053 4F8924EE                  mov [r14+8*r13], r12  ; move normalized number into array (r14)
    82 00000057 49FFC5                    inc r13
    83 0000005A EBD9                      jmp beginloop
    84                                  
    85                                  endloop:
    86                                  
    87                                  ; =============== xrstor ================================
    88 0000005C B807000000              mov rax, 7
    89 00000061 BA00000000              mov rdx, 0
    90 00000066 0FAE2C25[00000000]      xrstor [backuparea]
    91                                  
    92                                  ; =============== Restore GPRs ==========================
    93 0000006E 9D                      popf
    94 0000006F 415F                    pop r15
    95 00000071 415E                    pop r14
    96 00000073 415D                    pop r13
    97 00000075 415C                    pop r12
    98 00000077 415B                    pop r11
    99 00000079 415A                    pop r10
   100 0000007B 4159                    pop r9
   101 0000007D 4158                    pop r8
   102 0000007F 5F                      pop rdi
   103 00000080 5E                      pop rsi
   104 00000081 5A                      pop rdx
   105 00000082 59                      pop rcx
   106 00000083 5B                      pop rbx
   107 00000084 5D                      pop rbp
   108                                  
   109 00000085 C3                      ret
