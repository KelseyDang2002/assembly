     1                                  ; Program Name: Random Numbers
     2                                  ; Subject: CPSC 240-03 <Strings>
     3                                  ; This program demonstrates non-deterministic random number generation.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Random Numbers
    19                                  ;   Program Languages: C, Assembly X86-64, bash
    20                                  ;   Due Date: ---
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This file gets called by executive.asm and fills the array with randomly generated floats.
    25                                  
    26                                  ; File Information
    27                                  ;   Filename: fill_random_array.asm
    28                                  ;   Language: Assembly X86-64
    29                                  ;   Compile: nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    30                                  ;   Link: gcc -m64 -fno-pie -no-pie -std=c17 -o a.out main.o executive.o fill_random_array.o show_array.o isnan.o
    31                                  
    32                                  global fill_random_array
    33                                  extern rdrand
    34                                  
    35                                  segment .data
    36 00000000 256C6600                floatform db "%lf", 0
    37 00000004 257300                  stringform db "%s", 0
    38                                  
    39                                  segment .bss
    40                                  align 64
    41 00000000 <res 00000340>          backuparea resb 832
    42                                  
    43                                  segment .text
    44                                  fill_random_array:
    45                                  
    46                                  ; ============= Backup GPRs ============================
    47 00000000 55                      push rbp
    48 00000001 4889E5                  mov rbp, rsp
    49 00000004 53                      push rbx
    50 00000005 51                      push rcx
    51 00000006 52                      push rdx
    52 00000007 56                      push rsi
    53 00000008 57                      push rdi
    54 00000009 4150                    push r8
    55 0000000B 4151                    push r9
    56 0000000D 4152                    push r10
    57 0000000F 4153                    push r11
    58 00000011 4154                    push r12
    59 00000013 4155                    push r13
    60 00000015 4156                    push r14
    61 00000017 4157                    push r15
    62 00000019 9C                      pushf
    63                                  
    64                                  ; =============== xsave =================================
    65 0000001A B807000000              mov rax, 7
    66 0000001F BA00000000              mov rdx, 0
    67 00000024 0FAE2425[00000000]      xsave [backuparea]
    68                                  
    69                                  ; =============== fill_random_array =====================
    70 0000002C 4D31ED                  xor r13, r13            ; index starting at 0
    71 0000002F 4989FE                  mov r14, rdi            ; num_array
    72 00000032 4989F7                  mov r15, rsi            ; size of num_array
    73                                  
    74                                  beginloop:
    75 00000035 4D39FD                    cmp r13, r15          ; if index reaches size of num_array
    76 00000038 7D0D                      jge endloop           ; jump to end of loop
    77                                  
    78 0000003A 490FC7F4                  rdrand r12            ; generate random number and copy to r15
    79 0000003E 4F8924EE                  mov [r14+8*r13], r12
    80 00000042 49FFC5                    inc r13               ; i++
    81 00000045 EBEE                      jmp beginloop         ; jump to beginloop until index = size
    82                                  
    83                                  endloop:
    84                                  
    85                                  ; =============== xrstor ================================
    86 00000047 B807000000              mov rax, 7
    87 0000004C BA00000000              mov rdx, 0
    88 00000051 0FAE2C25[00000000]      xrstor [backuparea]
    89                                  
    90                                  ; =============== Restore GPRs ==========================
    91 00000059 9D                      popf
    92 0000005A 415F                    pop r15
    93 0000005C 415E                    pop r14
    94 0000005E 415D                    pop r13
    95 00000060 415C                    pop r12
    96 00000062 415B                    pop r11
    97 00000064 415A                    pop r10
    98 00000066 4159                    pop r9
    99 00000068 4158                    pop r8
   100 0000006A 5F                      pop rdi
   101 0000006B 5E                      pop rsi
   102 0000006C 5A                      pop rdx
   103 0000006D 59                      pop rcx
   104 0000006E 5B                      pop rbx
   105 0000006F 5D                      pop rbp
   106                                  
   107 00000070 C3                      ret
