     1                                  ; Program Name: Random Numbers
     2                                  ; Subject: CPSC 240-03 <Strings>
     3                                  ; This program demonstrates non-deterministic random number generation.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Random Numbers
    19                                  ;   Program Languages: C, Assembly X86-64, bash
    20                                  ;   Due Date: ---
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This file calls fill_random_array.asm, show_array.asm, and isnan.asm.
    25                                  ;   This file gets called by main.c.
    26                                  
    27                                  ; File Information
    28                                  ;   Filename: executive.asm
    29                                  ;   Language: Assembly X86-64
    30                                  ;   Compile: nasm -f elf64 -l executive.lis -o executive.o executive.asm
    31                                  ;   Link: gcc -m64 -fno-pie -no-pie -std=c17 -o a.out main.o executive.o fill_random_array.o show_array.o isnan.o
    32                                  
    33                                  global executive
    34                                  extern fill_random_array
    35                                  extern show_array
    36                                  extern isnan
    37                                  extern fgets
    38                                  extern strlen
    39                                  extern atoi
    40                                  extern stdin
    41                                  extern printf
    42                                  extern scanf
    43                                  max_size equ 60
    44                                  
    45                                  segment .data
    46 00000000 657865637574697665-     prompt_name db "executive: Please enter your name: ", 0
    46 00000009 3A20506C6561736520-
    46 00000012 656E74657220796F75-
    46 0000001B 72206E616D653A2000 
    47 00000024 657865637574697665-     prompt_title db "executive: Please enter your title: ", 0
    47 0000002D 3A20506C6561736520-
    47 00000036 656E74657220796F75-
    47 0000003F 72207469746C653A20-
    47 00000048 00                 
    48 00000049 657865637574697665-     welcome_msg db "executive: Nice to meet you %s %s.", 10, 0
    48 00000052 3A204E69636520746F-
    48 0000005B 206D65657420796F75-
    48 00000064 2025732025732E0A00 
    49                                  
    50 0000006D 0A6578656375746976-     desc_msg db 10, "executive: This program will generate 64-bit IEEE float numbers.", 10, 0
    50 00000076 653A20546869732070-
    50 0000007F 726F6772616D207769-
    50 00000088 6C6C2067656E657261-
    50 00000091 74652036342D626974-
    50 0000009A 204945454520666C6F-
    50 000000A3 6174206E756D626572-
    50 000000AC 732E0A00           
    51 000000B0 657865637574697665-     prompt_numbers db "executive: How many numbers do you want? Today's limit is 100 per customer: ", 0
    51 000000B9 3A20486F77206D616E-
    51 000000C2 79206E756D62657273-
    51 000000CB 20646F20796F752077-
    51 000000D4 616E743F20546F6461-
    51 000000DD 792773206C696D6974-
    51 000000E6 206973203130302070-
    51 000000EF 657220637573746F6D-
    51 000000F8 65723A2000         
    52 000000FD 657865637574697665-     array_msg db "executive: Your numbers have been stored in an array. Here is that array.", 10, 10, 0
    52 00000106 3A20596F7572206E75-
    52 0000010F 6D6265727320686176-
    52 00000118 65206265656E207374-
    52 00000121 6F72656420696E2061-
    52 0000012A 6E2061727261792E20-
    52 00000133 486572652069732074-
    52 0000013C 686174206172726179-
    52 00000145 2E0A0A00           
    53                                  
    54 00000149 0A6578656375746976-     normalize_msg_1 db 10, "executive: The array will now be normalized to the range 1.0 to 2.0.", 10, 0
    54 00000152 653A20546865206172-
    54 0000015B 7261792077696C6C20-
    54 00000164 6E6F77206265206E6F-
    54 0000016D 726D616C697A656420-
    54 00000176 746F20746865207261-
    54 0000017F 6E676520312E302074-
    54 00000188 6F20322E302E0A00   
    55 00000190 657865637574697665-     normalize_msg_2 db "executive: Here is the noramlized array.", 10, 10, 0
    55 00000199 3A2048657265206973-
    55 000001A2 20746865206E6F7261-
    55 000001AB 6D6C697A6564206172-
    55 000001B4 7261792E0A0A00     
    56                                  
    57 000001BB 0A6578656375746976-     goodbye_msg db 10, "executive: Good-bye %s. You are welcome any time.", 10, 0
    57 000001C4 653A20476F6F642D62-
    57 000001CD 79652025732E20596F-
    57 000001D6 75206172652077656C-
    57 000001DF 636F6D6520616E7920-
    57 000001E8 74696D652E0A00     
    58                                  
    59 000001EF 256C6600                floatform db "%lf", 0
    60 000001F3 257300                  stringform db "%s", 0
    61                                  
    62                                  segment .bss
    63                                  align 64
    64 00000000 <res 00000340>          backuparea resb 832
    65 00000340 <res 0000003C>          name_array resb max_size
    66 0000037C <res 0000003C>          title_array resb max_size
    67 000003B8 <res 0000003C>          num_array resb max_size
    68 000003F4 <res 0000003C>          random_num_array resb max_size
    69                                  
    70                                  segment .text
    71                                  executive:
    72                                  
    73                                  ; ============= Backup GPRs ============================
    74 00000000 55                      push rbp
    75 00000001 4889E5                  mov rbp, rsp
    76 00000004 53                      push rbx
    77 00000005 51                      push rcx
    78 00000006 52                      push rdx
    79 00000007 56                      push rsi
    80 00000008 57                      push rdi
    81 00000009 4150                    push r8
    82 0000000B 4151                    push r9
    83 0000000D 4152                    push r10
    84 0000000F 4153                    push r11
    85 00000011 4154                    push r12
    86 00000013 4155                    push r13
    87 00000015 4156                    push r14
    88 00000017 4157                    push r15
    89 00000019 9C                      pushf
    90                                  
    91                                  ; =============== xsave =================================
    92 0000001A B807000000              mov rax, 7
    93 0000001F BA00000000              mov rdx, 0
    94 00000024 0FAE2425[00000000]      xsave [backuparea]
    95                                  
    96                                  ; =============== Print prompt_name =====================
    97 0000002C B800000000              mov rax, 0
    98 00000031 48BF-                   mov rdi, prompt_name
    98 00000033 [0000000000000000] 
    99 0000003B 48BE-                   mov rsi, stringform
    99 0000003D [F301000000000000] 
   100 00000045 E8(00000000)            call printf
   101                                  
   102                                  ; =============== Get name from user ====================
   103 0000004A B800000000              mov rax, 0
   104 0000004F 48BF-                   mov rdi, name_array
   104 00000051 [4003000000000000] 
   105 00000059 BE3C000000              mov rsi, max_size
   106 0000005E 488B1425[00000000]      mov rdx, [stdin]
   107 00000066 E8(00000000)            call fgets
   108                                  
   109                                  ; remove \n char
   110 0000006B B800000000              mov rax, 0
   111 00000070 48BF-                   mov rdi, name_array
   111 00000072 [4003000000000000] 
   112 0000007A E8(00000000)            call strlen
   113 0000007F C680[3F030000]00        mov byte[name_array+rax-1], byte 0
   114                                  
   115                                  ; =============== Print prompt_title ====================
   116 00000086 B800000000              mov rax, 0
   117 0000008B 48BF-                   mov rdi, prompt_title
   117 0000008D [2400000000000000] 
   118 00000095 48BE-                   mov rsi, stringform
   118 00000097 [F301000000000000] 
   119 0000009F E8(00000000)            call printf
   120                                  
   121                                  ; =============== Get title from user ===================
   122 000000A4 B800000000              mov rax, 0
   123 000000A9 48BF-                   mov rdi, title_array
   123 000000AB [7C03000000000000] 
   124 000000B3 BE3C000000              mov rsi, max_size
   125 000000B8 488B1425[00000000]      mov rdx, [stdin]
   126 000000C0 E8(00000000)            call fgets
   127                                  
   128                                  ; remove \n char
   129 000000C5 B800000000              mov rax, 0
   130 000000CA 48BF-                   mov rdi, title_array
   130 000000CC [7C03000000000000] 
   131 000000D4 E8(00000000)            call strlen
   132 000000D9 C680[7B030000]00        mov byte[title_array+rax-1], byte 0
   133                                  
   134                                  ; =============== Print welcome_msg =====================
   135 000000E0 B800000000              mov rax, 0
   136 000000E5 48BF-                   mov rdi, welcome_msg
   136 000000E7 [4900000000000000] 
   137 000000EF 48BE-                   mov rsi, title_array
   137 000000F1 [7C03000000000000] 
   138 000000F9 48BA-                   mov rdx, name_array
   138 000000FB [4003000000000000] 
   139 00000103 E8(00000000)            call printf
   140                                  
   141                                  ; =============== Print desc_msg ========================
   142 00000108 B800000000              mov rax, 0
   143 0000010D 48BF-                   mov rdi, desc_msg
   143 0000010F [6D00000000000000] 
   144 00000117 48BE-                   mov rsi, stringform
   144 00000119 [F301000000000000] 
   145 00000121 E8(00000000)            call printf
   146                                  
   147                                  ; =============== Print prompt_numbers ==================
   148 00000126 B800000000              mov rax, 0
   149 0000012B 48BF-                   mov rdi, prompt_numbers
   149 0000012D [B000000000000000] 
   150 00000135 48BE-                   mov rsi, stringform
   150 00000137 [F301000000000000] 
   151 0000013F E8(00000000)            call printf
   152                                  
   153                                  ; =============== Receive user number input =============
   154 00000144 B800000000              mov rax, 0
   155 00000149 48BF-                   mov rdi, num_array
   155 0000014B [B803000000000000] 
   156 00000153 BE3C000000              mov rsi, max_size
   157 00000158 488B1425[00000000]      mov rdx, [stdin]
   158 00000160 E8(00000000)            call fgets
   159                                  
   160                                  ; remove \n char
   161 00000165 B800000000              mov rax, 0
   162 0000016A 48BF-                   mov rdi, num_array
   162 0000016C [B803000000000000] 
   163 00000174 E8(00000000)            call strlen
   164 00000179 C680[B7030000]00        mov byte[num_array+rax-1], byte 0
   165                                  
   166                                  ; convert num_array to integer
   167 00000180 B800000000              mov rax, 0
   168 00000185 48BF-                   mov rdi, num_array
   168 00000187 [B803000000000000] 
   169 0000018F E8(00000000)            call atoi
   170 00000194 4989C7                  mov r15, rax
   171                                  
   172                                  ; =============== Print array_msg =======================
   173 00000197 B800000000              mov rax, 0
   174 0000019C 48BF-                   mov rdi, array_msg
   174 0000019E [FD00000000000000] 
   175 000001A6 48BE-                   mov rsi, stringform
   175 000001A8 [F301000000000000] 
   176 000001B0 E8(00000000)            call printf
   177                                  
   178                                  ; =============== Call fill_random_array ================
   179 000001B5 B800000000              mov rax, 0
   180 000001BA 48BF-                   mov rdi, random_num_array
   180 000001BC [F403000000000000] 
   181 000001C4 4C89FE                  mov rsi, r15
   182 000001C7 E8(00000000)            call fill_random_array
   183                                  
   184                                  ; =============== Call show_array =======================
   185 000001CC B800000000              mov rax, 0
   186 000001D1 48BF-                   mov rdi, random_num_array
   186 000001D3 [F403000000000000] 
   187 000001DB 4C89FE                  mov rsi, r15
   188 000001DE E8(00000000)            call show_array
   189                                  
   190                                  ; =============== Print normalize_msg_1 =================
   191 000001E3 B800000000              mov rax, 0
   192 000001E8 48BF-                   mov rdi, normalize_msg_1
   192 000001EA [4901000000000000] 
   193 000001F2 48BE-                   mov rsi, stringform
   193 000001F4 [F301000000000000] 
   194 000001FC E8(00000000)            call printf
   195                                  
   196                                  ; =============== Print normalize_msg_2 =================
   197 00000201 B800000000              mov rax, 0
   198 00000206 48BF-                   mov rdi, normalize_msg_2
   198 00000208 [9001000000000000] 
   199 00000210 48BE-                   mov rsi, stringform
   199 00000212 [F301000000000000] 
   200 0000021A E8(00000000)            call printf
   201                                  
   202                                  ; =============== Call isnan ============================
   203 0000021F B800000000              mov rax, 0
   204 00000224 48BF-                   mov rdi, random_num_array
   204 00000226 [F403000000000000] 
   205 0000022E 4C89FE                  mov rsi, r15
   206 00000231 E8(00000000)            call isnan
   207                                  
   208                                  ; =============== Call array_msg ========================
   209 00000236 B800000000              mov rax, 0
   210 0000023B 48BF-                   mov rdi, random_num_array
   210 0000023D [F403000000000000] 
   211 00000245 4C89FE                  mov rsi, r15
   212 00000248 E8(00000000)            call show_array
   213                                  
   214                                  ; =============== Print goodbye_msg =====================
   215 0000024D B800000000              mov rax, 0
   216 00000252 48BF-                   mov rdi, goodbye_msg
   216 00000254 [BB01000000000000] 
   217 0000025C 48BE-                   mov rsi, title_array
   217 0000025E [7C03000000000000] 
   218 00000266 E8(00000000)            call printf
   219                                  
   220                                  ; =============== xrstor ================================
   221 0000026B B807000000              mov rax, 7
   222 00000270 BA00000000              mov rdx, 0
   223 00000275 0FAE2C25[00000000]      xrstor [backuparea]
   224                                  
   225 0000027D 48B8-                   mov rax, name_array
   225 0000027F [4003000000000000] 
   226                                  
   227                                  ; =============== Restore GPRs ==========================
   228 00000287 9D                      popf
   229 00000288 415F                    pop r15
   230 0000028A 415E                    pop r14
   231 0000028C 415D                    pop r13
   232 0000028E 415C                    pop r12
   233 00000290 415B                    pop r11
   234 00000292 415A                    pop r10
   235 00000294 4159                    pop r9
   236 00000296 4158                    pop r8
   237 00000298 5F                      pop rdi
   238 00000299 5E                      pop rsi
   239 0000029A 5A                      pop rdx
   240 0000029B 59                      pop rcx
   241 0000029C 5B                      pop rbx
   242 0000029D 5D                      pop rbp
   243                                  
   244 0000029E C3                      ret
