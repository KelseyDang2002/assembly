     1                                  ; Program Name: Random Numbers
     2                                  ; Subject: CPSC 240-03 <Strings>
     3                                  ; This program demonstrates non-deterministic random number generation.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Random Numbers
    19                                  ;   Program Languages: C, Assembly X86-64, bash
    20                                  ;   Due Date: ---
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This file gets called by executive.asm and prints the array in IEEE754 and scientific decimal.
    25                                  
    26                                  ; File Information
    27                                  ;   Filename: show_array.asm
    28                                  ;   Language: Assembly X86-64
    29                                  ;   Compile: nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    30                                  ;   Link: gcc -m64 -fno-pie -no-pie -std=c17 -o a.out main.o executive.o fill_random_array.o show_array.o isnan.o
    31                                  
    32                                  global show_array
    33                                  extern printf
    34                                  
    35                                  segment .data
    36 00000000 73686F775F61727261-     labels db "show_array: IEEE754                Scientific Decimal", 10, 0
    36 00000009 793A20494545453735-
    36 00000012 342020202020202020-
    36 0000001B 202020202020202053-
    36 00000024 6369656E7469666963-
    36 0000002D 20446563696D616C0A-
    36 00000036 00                 
    37 00000037 73686F775F61727261-     data_format db "show_array: 0x%016lx     %-18.13g", 10, 0
    37 00000040 793A20307825303136-
    37 00000049 6C782020202020252D-
    37 00000052 31382E3133670A00   
    38                                  
    39 0000005A 256C6600                floatform db "%lf", 0
    40 0000005E 257300                  stringform db "%s", 0
    41                                  
    42                                  segment .bss
    43                                  align 64
    44 00000000 <res 00000340>          backuparea resb 832
    45                                  
    46                                  segment .text
    47                                  show_array:
    48                                  
    49                                  ; ============= Backup GPRs ============================
    50 00000000 55                      push rbp
    51 00000001 4889E5                  mov rbp, rsp
    52 00000004 53                      push rbx
    53 00000005 51                      push rcx
    54 00000006 52                      push rdx
    55 00000007 56                      push rsi
    56 00000008 57                      push rdi
    57 00000009 4150                    push r8
    58 0000000B 4151                    push r9
    59 0000000D 4152                    push r10
    60 0000000F 4153                    push r11
    61 00000011 4154                    push r12
    62 00000013 4155                    push r13
    63 00000015 4156                    push r14
    64 00000017 4157                    push r15
    65 00000019 9C                      pushf
    66                                  
    67                                  ; =============== xsave =================================
    68 0000001A B807000000              mov rax, 7
    69 0000001F BA00000000              mov rdx, 0
    70 00000024 0FAE2425[00000000]      xsave [backuparea]
    71                                  
    72                                  ; =============== show_array ============================
    73 0000002C 4D31ED                  xor r13, r13            ; index starting at 0
    74 0000002F 4989FE                  mov r14, rdi            ; num_array
    75 00000032 4989F7                  mov r15, rsi            ; size of num_array
    76                                  
    77                                  ; print label
    78 00000035 B800000000              mov rax, 0
    79 0000003A 48BF-                   mov rdi, labels
    79 0000003C [0000000000000000] 
    80 00000044 48BE-                   mov rsi, stringform
    80 00000046 [5E00000000000000] 
    81 0000004E E8(00000000)            call printf
    82                                  
    83                                  beginloop:
    84 00000053 4D39FD                    cmp r13, r15          ; if index reaches size of num_array
    85 00000056 7D23                      jge endloop           ; jump to end of loop
    86                                  
    87 00000058 B801000000                mov rax, 1
    88 0000005D 48BF-                     mov rdi, data_format
    88 0000005F [3700000000000000] 
    89 00000067 4B8B34EE                  mov rsi, [r14+8*r13]
    90 0000006B F2430F1004EE              movsd xmm0, [r14+8*r13]
    91 00000071 E8(00000000)              call printf
    92 00000076 49FFC5                    inc r13
    93 00000079 EBD8                      jmp beginloop
    94                                  
    95                                  endloop:
    96                                  
    97                                  ; =============== xrstor ================================
    98 0000007B B807000000              mov rax, 7
    99 00000080 BA00000000              mov rdx, 0
   100 00000085 0FAE2C25[00000000]      xrstor [backuparea]
   101                                  
   102                                  ; =============== Restore GPRs ==========================
   103 0000008D 9D                      popf
   104 0000008E 415F                    pop r15
   105 00000090 415E                    pop r14
   106 00000092 415D                    pop r13
   107 00000094 415C                    pop r12
   108 00000096 415B                    pop r11
   109 00000098 415A                    pop r10
   110 0000009A 4159                    pop r9
   111 0000009C 4158                    pop r8
   112 0000009E 5F                      pop rdi
   113 0000009F 5E                      pop rsi
   114 000000A0 5A                      pop rdx
   115 000000A1 59                      pop rcx
   116 000000A2 5B                      pop rbx
   117 000000A3 5D                      pop rbp
   118                                  
   119 000000A4 C3                      ret
