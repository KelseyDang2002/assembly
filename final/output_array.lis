     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Section: 240-3
     4                                  
     5                                  global output_array
     6                                  extern cpuid
     7                                  extern fgets
     8                                  extern strlen
     9                                  extern atoi
    10                                  extern stdin
    11                                  extern stdout
    12                                  extern printf
    13                                  
    14                                  segment .data
    15 00000000 6F75747075745F6172-     labels db "output_array: IEEE754              Scientific Decimal", 10, 0
    15 00000009 7261793A2049454545-
    15 00000012 373534202020202020-
    15 0000001B 202020202020202053-
    15 00000024 6369656E7469666963-
    15 0000002D 20446563696D616C0A-
    15 00000036 00                 
    16 00000037 6F75747075745F6172-     data_format db "output_array: 0x%016lx = %-.7E", 10, 0
    16 00000040 7261793A2030782530-
    16 00000049 31366C78203D20252D-
    16 00000052 2E37450A00         
    17 00000057 6F75747075745F6172-     delay db "output_array: delay = %lf", 10, 0
    17 00000060 7261793A2064656C61-
    17 00000069 79203D20256C660A00 
    18                                  
    19 00000072 256C6600                floatform db "%lf", 0
    20 00000076 257300                  stringform db "%s", 0
    21                                  
    22                                  segment .bss
    23                                  align 64
    24 00000000 <res 00000340>          backuparea resb 832
    25                                  
    26                                  segment .text
    27                                  output_array:
    28                                  
    29                                  ; ============= Backup GPRs ============================
    30 00000000 55                      push rbp
    31 00000001 4889E5                  mov rbp, rsp
    32 00000004 53                      push rbx
    33 00000005 51                      push rcx
    34 00000006 52                      push rdx
    35 00000007 56                      push rsi
    36 00000008 57                      push rdi
    37 00000009 4150                    push r8
    38 0000000B 4151                    push r9
    39 0000000D 4152                    push r10
    40 0000000F 4153                    push r11
    41 00000011 4154                    push r12
    42 00000013 4155                    push r13
    43 00000015 4156                    push r14
    44 00000017 4157                    push r15
    45 00000019 9C                      pushf
    46                                  
    47                                  ; =============== xsave =================================
    48 0000001A B807000000              mov rax, 7
    49 0000001F BA00000000              mov rdx, 0
    50 00000024 0FAE2425[00000000]      xsave [backuparea]
    51                                  
    52                                  ; =============== output_array ==========================
    53                                  
    54 0000002C 4D31ED                  xor r13, r13            ; index starting at 0
    55 0000002F 4989FE                  mov r14, rdi            ; num_array
    56 00000032 4989F7                  mov r15, rsi            ; size of num_array
    57 00000035 4989D4                  mov r12, rdx            ; frequency * delay
    58                                  
    59                                  ; print label
    60 00000038 B800000000              mov rax, 0
    61 0000003D 48BF-                   mov rdi, labels
    61 0000003F [0000000000000000] 
    62 00000047 48BE-                   mov rsi, stringform
    62 00000049 [7600000000000000] 
    63 00000051 E8(00000000)            call printf
    64                                  
    65                                  ; read clock and put into r10
    66 00000056 4831C0                  xor rax, rax
    67 00000059 4831D2                  xor rdx, rdx
    68 0000005C 0FA2                    cpuid
    69 0000005E 0F31                    rdtsc
    70 00000060 48C1E220                shl rdx, 32
    71 00000064 4809D0                  or rax, rdx
    72 00000067 4989C2                  mov r10, rax
    73                                  
    74                                  ; add r10 to r12
    75 0000006A 4D01D4                  add r12, r10
    76                                  
    77                                  beginloop:
    78 0000006D 4D39FD                    cmp r13, r15          ; if index reaches size of num_array
    79 00000070 7D3C                      jge endloop           ; jump to end of loop
    80                                  
    81 00000072 B801000000                mov rax, 1
    82 00000077 48BF-                     mov rdi, data_format
    82 00000079 [3700000000000000] 
    83 00000081 4B8B34EE                  mov rsi, [r14+8*r13]
    84 00000085 F2430F1004EE              movsd xmm0, [r14+8*r13]
    85 0000008B E8(00000000)              call printf
    86 00000090 49FFC5                    inc r13
    87 00000093 EBD8                      jmp beginloop
    88                                  
    89                                    ; read clock and put into r11
    90 00000095 4831C0                    xor rax, rax
    91 00000098 4831D2                    xor rdx, rdx
    92 0000009B 0FA2                      cpuid
    93 0000009D 0F31                      rdtsc
    94 0000009F 48C1E220                  shl rdx, 32
    95 000000A3 4809D0                    or rax, rdx
    96 000000A6 4989C3                    mov r11, rax
    97                                  
    98                                    ; compare r11 with r12
    99 000000A9 4D39E3                    cmp r11, r12
   100 000000AC 7F00                      jg endloop
   101                                  
   102                                  endloop:
   103                                  
   104                                  ; =============== xrstor ================================
   105 000000AE B807000000              mov rax, 7
   106 000000B3 BA00000000              mov rdx, 0
   107 000000B8 0FAE2C25[00000000]      xrstor [backuparea]
   108                                  
   109                                  ; =============== Restore GPRs ==========================
   110 000000C0 9D                      popf
   111 000000C1 415F                    pop r15
   112 000000C3 415E                    pop r14
   113 000000C5 415D                    pop r13
   114 000000C7 415C                    pop r12
   115 000000C9 415B                    pop r11
   116 000000CB 415A                    pop r10
   117 000000CD 4159                    pop r9
   118 000000CF 4158                    pop r8
   119 000000D1 5F                      pop rdi
   120 000000D2 5E                      pop rsi
   121 000000D3 5A                      pop rdx
   122 000000D4 59                      pop rcx
   123 000000D5 5B                      pop rbx
   124 000000D6 5D                      pop rbp
   125                                  
   126 000000D7 C3                      ret
