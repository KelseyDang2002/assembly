     1                                  ; Program Name: Final
     2                                  ; Subject: CPSC 240-03 <Final>
     3                                  ; This program is for the Final Program Exam.
     4                                  ;
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  ;
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  ;
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Final
    19                                  ;   Program Languages: C, Assembly X86-64, bash
    20                                  ;   Due Date: 12/6/23
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  ;
    23                                  ; Purpose
    24                                  ;   ---
    25                                  ;
    26                                  ; File Information
    27                                  ;   Filename: manager.asm
    28                                  ;   Language: Assembly X86-64
    29                                  ;   Compile: nasm -f elf64 -l manager.lis -o manager.o manager.asm
    30                                  ;   Link:
    31                                  
    32                                  global manager
    33                                  extern input_array
    34                                  extern output_array
    35                                  extern fgets
    36                                  extern strlen
    37                                  extern atoi
    38                                  extern stdin
    39                                  extern stdout
    40                                  extern printf
    41                                  extern scanf
    42                                  max_size equ 25
    43                                  
    44                                  segment .data
    45 00000000 6D616E616765723A20-     care_msg db "manager: We will take care of all your array needs.", 10, 0
    45 00000009 57652077696C6C2074-
    45 00000012 616B65206361726520-
    45 0000001B 6F6620616C6C20796F-
    45 00000024 757220617272617920-
    45 0000002D 6E656564732E0A00   
    46 00000035 6D616E616765723A20-     prompt_input db "manager: Please input how many numbers you want. The limit is 100: ", 0
    46 0000003E 506C6561736520696E-
    46 00000047 70757420686F77206D-
    46 00000050 616E79206E756D6265-
    46 00000059 727320796F75207761-
    46 00000062 6E742E20546865206C-
    46 0000006B 696D69742069732031-
    46 00000074 30303A2000         
    47 00000079 6D616E616765723A20-     prompt_delay db "manager: What is the delay time you prefer (seconds)? ", 0
    47 00000082 576861742069732074-
    47 0000008B 68652064656C617920-
    47 00000094 74696D6520796F7520-
    47 0000009D 707265666572202873-
    47 000000A6 65636F6E6473293F20-
    47 000000AF 00                 
    48 000000B0 6D616E616765723A20-     prompt_frequency db "manager: What is the maximum frequency of your cpu (GHz)? ", 0
    48 000000B9 576861742069732074-
    48 000000C2 6865206D6178696D75-
    48 000000CB 6D206672657175656E-
    48 000000D4 6379206F6620796F75-
    48 000000DD 722063707520284748-
    48 000000E6 7A293F2000         
    49 000000EB 6D616E616765723A20-     array_msg db "manager: Here are the values in the array.", 10, 10, 0
    49 000000F4 486572652061726520-
    49 000000FD 7468652076616C7565-
    49 00000106 7320696E2074686520-
    49 0000010F 61727261792E0A0A00 
    50 00000118 0A6D616E616765723A-     display_msg db 10, "manager: The numbers of the array have been displayed.", 10, 0
    50 00000121 20546865206E756D62-
    50 0000012A 657273206F66207468-
    50 00000133 652061727261792068-
    50 0000013C 617665206265656E20-
    50 00000145 646973706C61796564-
    50 0000014E 2E0A00             
    51 00000151 6D616E616765723A20-     thankyou_msg db "manager: Thank you for using Array Management System.", 10, 0
    51 0000015A 5468616E6B20796F75-
    51 00000163 20666F72207573696E-
    51 0000016C 67204172726179204D-
    51 00000175 616E6167656D656E74-
    51 0000017E 2053797374656D2E0A-
    51 00000187 00                 
    52                                  
    53 00000188 256C6600                floatform db "%lf", 0
    54 0000018C 257300                  stringform db "%s", 0
    55                                  
    56                                  segment .bss
    57                                  align 64
    58 00000000 <res 00000340>          backuparea resb 832
    59 00000340 <res 00000019>          num_array resb max_size
    60 00000359 <res 00000019>          random_num_array resb max_size
    61                                  
    62 00000372 <res 00000019>          delay_array resb max_size
    63 0000038B <res 00000019>          frequency_array resb max_size
    64                                  
    65                                  segment .text
    66                                  manager:
    67                                  
    68                                  ; ============= Backup GPRs ============================
    69 00000000 55                      push rbp
    70 00000001 4889E5                  mov rbp, rsp
    71 00000004 53                      push rbx
    72 00000005 51                      push rcx
    73 00000006 52                      push rdx
    74 00000007 56                      push rsi
    75 00000008 57                      push rdi
    76 00000009 4150                    push r8
    77 0000000B 4151                    push r9
    78 0000000D 4152                    push r10
    79 0000000F 4153                    push r11
    80 00000011 4154                    push r12
    81 00000013 4155                    push r13
    82 00000015 4156                    push r14
    83 00000017 4157                    push r15
    84 00000019 9C                      pushf
    85                                  
    86                                  ; =============== xsave =================================
    87 0000001A B807000000              mov rax, 7
    88 0000001F BA00000000              mov rdx, 0
    89 00000024 0FAE2425[00000000]      xsave [backuparea]
    90                                  
    91                                  ; =============== Print care_msg ========================
    92 0000002C B800000000              mov rax, 0
    93 00000031 48BF-                   mov rdi, care_msg
    93 00000033 [0000000000000000] 
    94 0000003B E8(00000000)            call printf
    95                                  
    96                                  ; =============== Print prompt_input ====================
    97 00000040 B800000000              mov rax, 0
    98 00000045 48BF-                   mov rdi, prompt_input
    98 00000047 [3500000000000000] 
    99 0000004F E8(00000000)            call printf
   100                                  
   101                                  ; =============== Receive count =========================
   102 00000054 B800000000              mov rax, 0
   103 00000059 48BF-                   mov rdi, num_array
   103 0000005B [4003000000000000] 
   104 00000063 BE19000000              mov rsi, max_size
   105 00000068 488B1425[00000000]      mov rdx, [stdin]
   106 00000070 E8(00000000)            call fgets
   107                                  
   108                                  ; remove \n char
   109 00000075 B800000000              mov rax, 0
   110 0000007A 48BF-                   mov rdi, num_array
   110 0000007C [4003000000000000] 
   111 00000084 E8(00000000)            call strlen
   112 00000089 C680[3F030000]00        mov byte[num_array+rax-1], byte 0
   113                                  
   114                                  ; convert num_array to integer
   115 00000090 B800000000              mov rax, 0
   116 00000095 48BF-                   mov rdi, num_array
   116 00000097 [4003000000000000] 
   117 0000009F E8(00000000)            call atoi
   118 000000A4 4989C7                  mov r15, rax
   119                                  
   120                                  ; =============== Call input_array ======================
   121 000000A7 B800000000              mov rax, 0
   122 000000AC 48BF-                   mov rdi, random_num_array
   122 000000AE [5903000000000000] 
   123 000000B6 4C89FE                  mov rsi, r15
   124 000000B9 E8(00000000)            call input_array
   125                                  
   126                                  ; =============== Print prompt_delay ====================
   127 000000BE B800000000              mov rax, 0
   128 000000C3 48BF-                   mov rdi, prompt_delay
   128 000000C5 [7900000000000000] 
   129 000000CD E8(00000000)            call printf
   130                                  
   131                                  ; get user input
   132 000000D2 B800000000              mov rax, 0
   133 000000D7 48BF-                   mov rdi, delay_array
   133 000000D9 [7203000000000000] 
   134 000000E1 BE19000000              mov rsi, max_size
   135 000000E6 488B1425[00000000]      mov rdx, [stdin]
   136 000000EE E8(00000000)            call fgets
   137                                  
   138                                  ; remove \n char
   139 000000F3 B800000000              mov rax, 0
   140 000000F8 48BF-                   mov rdi, delay_array
   140 000000FA [7203000000000000] 
   141 00000102 E8(00000000)            call strlen
   142 00000107 C680[71030000]00        mov byte[delay_array+rax-1], byte 0
   143                                  
   144                                  ; convert num_array to integer
   145 0000010E B800000000              mov rax, 0
   146 00000113 48BF-                   mov rdi, delay_array
   146 00000115 [7203000000000000] 
   147 0000011D E8(00000000)            call atoi
   148 00000122 4989C3                  mov r11, rax
   149                                  
   150                                  ; =============== Print prompt_frequency ================
   151 00000125 B800000000              mov rax, 0
   152 0000012A 48BF-                   mov rdi, prompt_frequency
   152 0000012C [B000000000000000] 
   153 00000134 E8(00000000)            call printf
   154                                  
   155                                  ; get user input
   156 00000139 B800000000              mov rax, 0
   157 0000013E 48BF-                   mov rdi, frequency_array
   157 00000140 [8B03000000000000] 
   158 00000148 BE19000000              mov rsi, max_size
   159 0000014D 488B1425[00000000]      mov rdx, [stdin]
   160 00000155 E8(00000000)            call fgets
   161                                  
   162                                  ; remove \n char
   163 0000015A B800000000              mov rax, 0
   164 0000015F 48BF-                   mov rdi, frequency_array
   164 00000161 [8B03000000000000] 
   165 00000169 E8(00000000)            call strlen
   166 0000016E C680[8A030000]00        mov byte[frequency_array+rax-1], byte 0
   167                                  
   168                                  ; convert num_array to integer
   169 00000175 B800000000              mov rax, 0
   170 0000017A 48BF-                   mov rdi, frequency_array
   170 0000017C [8B03000000000000] 
   171 00000184 E8(00000000)            call atoi
   172 00000189 4989C4                  mov r12, rax
   173                                  
   174                                  ; =============== frequency * delay =====================
   175 0000018C 4D0FAFE3                imul r12, r11
   176                                  
   177                                  ; =============== Print array_msg =======================
   178 00000190 B800000000              mov rax, 0
   179 00000195 48BF-                   mov rdi, array_msg
   179 00000197 [EB00000000000000] 
   180 0000019F E8(00000000)            call printf
   181                                  
   182                                  ; =============== Call output_array =====================
   183 000001A4 B800000000              mov rax, 0
   184 000001A9 48BF-                   mov rdi, random_num_array
   184 000001AB [5903000000000000] 
   185 000001B3 4C89FE                  mov rsi, r15
   186 000001B6 4889CA                  mov rdx, rcx
   187 000001B9 E8(00000000)            call output_array
   188                                  
   189                                  ; =============== Print display_msg =====================
   190 000001BE B800000000              mov rax, 0
   191 000001C3 48BF-                   mov rdi, display_msg
   191 000001C5 [1801000000000000] 
   192 000001CD E8(00000000)            call printf
   193                                  
   194                                  ; =============== Print thankyou_msg ====================
   195 000001D2 B800000000              mov rax, 0
   196 000001D7 48BF-                   mov rdi, thankyou_msg
   196 000001D9 [5101000000000000] 
   197 000001E1 E8(00000000)            call printf
   198                                  
   199                                  ; =============== xrstor ================================
   200 000001E6 B807000000              mov rax, 7
   201 000001EB BA00000000              mov rdx, 0
   202 000001F0 0FAE2C25[00000000]      xrstor [backuparea]
   203                                  
   204 000001F8 48B8-                   mov rax, num_array
   204 000001FA [4003000000000000] 
   205                                  
   206                                  ; =============== Restore GPRs ==========================
   207 00000202 9D                      popf
   208 00000203 415F                    pop r15
   209 00000205 415E                    pop r14
   210 00000207 415D                    pop r13
   211 00000209 415C                    pop r12
   212 0000020B 415B                    pop r11
   213 0000020D 415A                    pop r10
   214 0000020F 4159                    pop r9
   215 00000211 4158                    pop r8
   216 00000213 5F                      pop rdi
   217 00000214 5E                      pop rsi
   218 00000215 5A                      pop rdx
   219 00000216 59                      pop rcx
   220 00000217 5B                      pop rbx
   221 00000218 5D                      pop rbp
   222                                  
   223 00000219 C3                      ret
