     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Section: 240-3
     4                                  
     5                                  global input_array
     6                                  extern rdrand
     7                                  extern printf
     8                                  
     9                                  segment .data
    10 00000000 0A696E7075745F6172-     fill_msg db 10, "input_array: The array has been filled with random numbers.", 10, 10, 0
    10 00000009 7261793A2054686520-
    10 00000012 617272617920686173-
    10 0000001B 206265656E2066696C-
    10 00000024 6C6564207769746820-
    10 0000002D 72616E646F6D206E75-
    10 00000036 6D626572732E0A0A00 
    11                                  
    12 0000003F 256C6600                floatform db "%lf", 0
    13 00000043 257300                  stringform db "%s", 0
    14                                  
    15                                  segment .bss
    16                                  align 64
    17 00000000 <res 00000340>          backuparea resb 832
    18                                  
    19                                  segment .text
    20                                  input_array:
    21                                  
    22                                  ; ============= Backup GPRs ============================
    23 00000000 55                      push rbp
    24 00000001 4889E5                  mov rbp, rsp
    25 00000004 53                      push rbx
    26 00000005 51                      push rcx
    27 00000006 52                      push rdx
    28 00000007 56                      push rsi
    29 00000008 57                      push rdi
    30 00000009 4150                    push r8
    31 0000000B 4151                    push r9
    32 0000000D 4152                    push r10
    33 0000000F 4153                    push r11
    34 00000011 4154                    push r12
    35 00000013 4155                    push r13
    36 00000015 4156                    push r14
    37 00000017 4157                    push r15
    38 00000019 9C                      pushf
    39                                  
    40                                  ; =============== xsave =================================
    41 0000001A B807000000              mov rax, 7
    42 0000001F BA00000000              mov rdx, 0
    43 00000024 0FAE2425[00000000]      xsave [backuparea]
    44                                  
    45                                  ; =============== output_array ==========================
    46 0000002C 4D31ED                  xor r13, r13            ; index starting at 0
    47 0000002F 4989FE                  mov r14, rdi            ; num_array
    48 00000032 4989F7                  mov r15, rsi            ; size of num_array
    49                                  
    50                                  beginloop:
    51 00000035 4D39FD                    cmp r13, r15          ; if index reaches size of num_array
    52 00000038 7D0D                      jge endloop           ; jump to end of loop
    53                                  
    54 0000003A 490FC7F4                  rdrand r12            ; generate random number and copy to r15
    55 0000003E 4F8924EE                  mov [r14+8*r13], r12
    56 00000042 49FFC5                    inc r13               ; i++
    57 00000045 EBEE                      jmp beginloop         ; jump to beginloop until index = size
    58                                  
    59                                  endloop:
    60                                  ; =============== Print fill_msg ========================
    61 00000047 B800000000              mov rax, 0
    62 0000004C 48BF-                   mov rdi, fill_msg
    62 0000004E [0000000000000000] 
    63 00000056 E8(00000000)            call printf
    64                                  
    65                                  ; =============== xrstor ================================
    66 0000005B B807000000              mov rax, 7
    67 00000060 BA00000000              mov rdx, 0
    68 00000065 0FAE2C25[00000000]      xrstor [backuparea]
    69                                  
    70                                  ; =============== Restore GPRs ==========================
    71 0000006D 9D                      popf
    72 0000006E 415F                    pop r15
    73 00000070 415E                    pop r14
    74 00000072 415D                    pop r13
    75 00000074 415C                    pop r12
    76 00000076 415B                    pop r11
    77 00000078 415A                    pop r10
    78 0000007A 4159                    pop r9
    79 0000007C 4158                    pop r8
    80 0000007E 5F                      pop rdi
    81 0000007F 5E                      pop rsi
    82 00000080 5A                      pop rdx
    83 00000081 59                      pop rcx
    84 00000082 5B                      pop rbx
    85 00000083 5D                      pop rbp
    86                                  
    87 00000084 C3                      ret
