     1                                  ; Program Name: Strings
     2                                  ; Subject: CPSC 240-03 <Strings>
     3                                  ; This program demonstrates string operations with fgets.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Strings
    19                                  ;   Program Languages: C, Assembly X86-64, bash
    20                                  ;   Due Date: 11/12/23
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This is the faraday file calls isfloat.asm in Strings.
    25                                  ;   This file gets called by ampere.c.
    26                                  
    27                                  ; File Information
    28                                  ;   Filename: faraday.asm
    29                                  ;   Language: Assembly X86-64
    30                                  ;   Compile: nasm -f elf64 -l faraday.lis -o faraday.o faraday.asm
    31                                  ;   Link: gcc -m64 -fno-pie -no-pie -std=c17 -o a.out ampere.o faraday.o isfloat.o
    32                                  
    33                                  global faraday
    34                                  extern isfloat
    35                                  extern fgets
    36                                  extern strlen
    37                                  extern atof
    38                                  extern stdin
    39                                  extern printf
    40                                  max_size equ 60
    41                                  
    42                                  segment .data
    43 00000000 666172616461793A20-     prompt_name db "faraday: Please enter your name: ", 0
    43 00000009 506C6561736520656E-
    43 00000012 74657220796F757220-
    43 0000001B 6E616D653A2000     
    44 00000022 666172616461793A20-     prompt_title db "faraday: Please enter your title or profession: ", 0
    44 0000002B 506C6561736520656E-
    44 00000034 74657220796F757220-
    44 0000003D 7469746C65206F7220-
    44 00000046 70726F66657373696F-
    44 0000004F 6E3A2000           
    45                                  
    46 00000053 666172616461793A20-     welcome_msg db "faraday: We always welcome a(n) %s to our electrical lab.", 10, 0
    46 0000005C 576520616C77617973-
    46 00000065 2077656C636F6D6520-
    46 0000006E 61286E292025732074-
    46 00000077 6F206F757220656C65-
    46 00000080 6374726963616C206C-
    46 00000089 61622E0A00         
    47                                  
    48 0000008E 0A666172616461793A-     prompt_volts db 10, "faraday: Please enter the voltage of the electrical system at your site (volts): ", 0
    48 00000097 20506C656173652065-
    48 000000A0 6E7465722074686520-
    48 000000A9 766F6C74616765206F-
    48 000000B2 662074686520656C65-
    48 000000BB 6374726963616C2073-
    48 000000C4 797374656D20617420-
    48 000000CD 796F75722073697465-
    48 000000D6 2028766F6C7473293A-
    48 000000DF 2000               
    49 000000E1 666172616461793A20-     prompt_ohms db "faraday: Please enter the electrical resistance in the system at your site (ohms): ", 0
    49 000000EA 506C6561736520656E-
    49 000000F3 746572207468652065-
    49 000000FC 6C656374726963616C-
    49 00000105 20726573697374616E-
    49 0000010E 636520696E20746865-
    49 00000117 2073797374656D2061-
    49 00000120 7420796F7572207369-
    49 00000129 746520286F686D7329-
    49 00000132 3A2000             
    50 00000135 666172616461793A20-     prompt_seconds db "faraday: Please enter the time your system was operating (seconds): ", 0
    50 0000013E 506C6561736520656E-
    50 00000147 746572207468652074-
    50 00000150 696D6520796F757220-
    50 00000159 73797374656D207761-
    50 00000162 73206F706572617469-
    50 0000016B 6E6720287365636F6E-
    50 00000174 6473293A2000       
    51                                  
    52 0000017A 0A666172616461793A-     thankyou_msg_1 db 10, "faraday: Thank you %s. ", 0
    52 00000183 205468616E6B20796F-
    52 0000018C 752025732E2000     
    53 00000193 5765206174204D616A-     thankyou_msg_2 db "We at Majestic are pleased to inform you that your system performed %.2lf joules of work.", 10, 0
    53 0000019C 657374696320617265-
    53 000001A5 20706C656173656420-
    53 000001AE 746F20696E666F726D-
    53 000001B7 20796F752074686174-
    53 000001C0 20796F757220737973-
    53 000001C9 74656D20706572666F-
    53 000001D2 726D656420252E326C-
    53 000001DB 66206A6F756C657320-
    53 000001E4 6F6620776F726B2E0A-
    53 000001ED 00                 
    54                                  
    55 000001EE 0A666172616461793A-     congrats_msg_1 db 10, "faraday: Congratulations %s. Come back any time and make use of our software.", 10, 0
    55 000001F7 20436F6E6772617475-
    55 00000200 6C6174696F6E732025-
    55 00000209 732E20436F6D652062-
    55 00000212 61636B20616E792074-
    55 0000021B 696D6520616E64206D-
    55 00000224 616B6520757365206F-
    55 0000022D 66206F757220736F66-
    55 00000236 74776172652E0A00   
    56 0000023E 45766572796F6E6520-     congrats_msg_2 db "Everyone with title %s is welcome to use our programs at a reduced price.", 10, 0
    56 00000247 77697468207469746C-
    56 00000250 652025732069732077-
    56 00000259 656C636F6D6520746F-
    56 00000262 20757365206F757220-
    56 0000026B 70726F6772616D7320-
    56 00000274 617420612072656475-
    56 0000027D 636564207072696365-
    56 00000286 2E0A00             
    57                                  
    58 00000289 666172616461793A20-     invalid_msg db "faraday: Invalid input. Please try again.", 10, 0
    58 00000292 496E76616C69642069-
    58 0000029B 6E7075742E20506C65-
    58 000002A4 617365207472792061-
    58 000002AD 6761696E2E0A00     
    59 000002B4 666172616461793A20-     debug_msg db "faraday: Float entered: %lf", 10, 0
    59 000002BD 466C6F617420656E74-
    59 000002C6 657265643A20256C66-
    59 000002CF 0A00               
    60                                  
    61 000002D1 256C6600                floatform db "%lf", 0
    62 000002D5 257300                  stringform db "%s", 0
    63                                  
    64                                  segment .bss
    65 00000000 <res 0000003C>          name_array resb max_size
    66 0000003C <res 0000003C>          title_array resb max_size
    67 00000078 <res 0000003C>          voltage_array resb max_size
    68 000000B4 <res 0000003C>          ohm_array resb max_size
    69 000000F0 <res 0000003C>          time_array resb max_size
    70                                  
    71                                  segment .text
    72                                  faraday:
    73                                  
    74                                  ; ============= Backup GPRs ============================
    75 00000000 55                      push rbp
    76 00000001 4889E5                  mov rbp, rsp
    77 00000004 53                      push rbx
    78 00000005 51                      push rcx
    79 00000006 52                      push rdx
    80 00000007 56                      push rsi
    81 00000008 57                      push rdi
    82 00000009 4150                    push r8
    83 0000000B 4151                    push r9
    84 0000000D 4152                    push r10
    85 0000000F 4153                    push r11
    86 00000011 4154                    push r12
    87 00000013 4155                    push r13
    88 00000015 4156                    push r14
    89 00000017 4157                    push r15
    90 00000019 9C                      pushf
    91                                  
    92                                  ; =============== Print prompt_name =====================
    93 0000001A B800000000              mov rax, 0
    94 0000001F 48BF-                   mov rdi, stringform
    94 00000021 [D502000000000000] 
    95 00000029 48BE-                   mov rsi, prompt_name
    95 0000002B [0000000000000000] 
    96 00000033 E8(00000000)            call printf
    97                                  
    98                                  ; =============== Get name from user ====================
    99 00000038 B800000000              mov rax, 0
   100 0000003D 48BF-                   mov rdi, name_array
   100 0000003F [0000000000000000] 
   101 00000047 BE3C000000              mov rsi, max_size
   102 0000004C 488B1425[00000000]      mov rdx, [stdin]
   103 00000054 E8(00000000)            call fgets
   104                                  
   105                                  ; remove \n char
   106 00000059 B800000000              mov rax, 0
   107 0000005E 48BF-                   mov rdi, name_array
   107 00000060 [0000000000000000] 
   108 00000068 E8(00000000)            call strlen
   109 0000006D C680[FFFFFFFF]00        mov byte[name_array+rax-1], byte 0
   110                                  
   111                                  ; =============== Print prompt_title ====================
   112 00000074 B800000000              mov rax, 0
   113 00000079 48BF-                   mov rdi, prompt_title
   113 0000007B [2200000000000000] 
   114 00000083 48BE-                   mov rsi, stringform
   114 00000085 [D502000000000000] 
   115 0000008D E8(00000000)            call printf
   116                                  
   117                                  ; =============== Get title from user ===================
   118 00000092 B800000000              mov rax, 0
   119 00000097 48BF-                   mov rdi, title_array
   119 00000099 [3C00000000000000] 
   120 000000A1 BE3C000000              mov rsi, max_size
   121 000000A6 488B1425[00000000]      mov rdx, [stdin]
   122 000000AE E8(00000000)            call fgets
   123                                  
   124                                  ; remove \n char
   125 000000B3 B800000000              mov rax, 0
   126 000000B8 48BF-                   mov rdi, title_array
   126 000000BA [3C00000000000000] 
   127 000000C2 E8(00000000)            call strlen
   128 000000C7 C680[3B000000]00        mov byte[title_array+rax-1], byte 0
   129                                  
   130                                  ; =============== Print welcome_msg =====================
   131 000000CE B800000000              mov rax, 0
   132 000000D3 48BF-                   mov rdi, welcome_msg
   132 000000D5 [5300000000000000] 
   133 000000DD 48BE-                   mov rsi, title_array
   133 000000DF [3C00000000000000] 
   134 000000E7 E8(00000000)            call printf
   135                                  
   136                                  ; =============== begin_num =============================
   137                                  begin_num:
   138                                  
   139                                  ; =============== Print prompt_volts ====================
   140 000000EC B800000000              mov rax, 0
   141 000000F1 48BF-                   mov rdi, prompt_volts
   141 000000F3 [8E00000000000000] 
   142 000000FB 48BE-                   mov rsi, stringform
   142 000000FD [D502000000000000] 
   143 00000105 E8(00000000)            call printf
   144                                  
   145                                  ; =============== Get voltage from user =================
   146                                  voltage_input:
   147 0000010A B800000000                mov rax, 0
   148 0000010F 48BF-                     mov rdi, voltage_array
   148 00000111 [7800000000000000] 
   149 00000119 BE3C000000                mov rsi, max_size
   150 0000011E 488B1425[00000000]        mov rdx, [stdin]
   151 00000126 E8(00000000)              call fgets
   152                                  
   153                                    ; remove \n char
   154 0000012B B800000000                mov rax, 0
   155 00000130 48BF-                     mov rdi, voltage_array
   155 00000132 [7800000000000000] 
   156 0000013A E8(00000000)              call strlen
   157 0000013F C680[77000000]00          mov byte[voltage_array+rax-1], byte 0
   158                                  
   159                                    ; check if input is valid
   160 00000146 B800000000                mov rax, 0
   161 0000014B 48BF-                     mov rdi, voltage_array
   161 0000014D [7800000000000000] 
   162 00000155 E8(00000000)              call isfloat          ; rax holds 0 if false and non-0 if true
   163 0000015A 4883F800                  cmp rax, 0
   164 0000015E 0F8439010000              je invalid
   165                                  
   166                                    ; input is valid
   167 00000164 B800000000                mov rax, 0
   168 00000169 48BF-                     mov rdi, voltage_array
   168 0000016B [7800000000000000] 
   169 00000173 E8(00000000)              call atof             ; convert # to xmm0
   170 00000178 F2440F10E0                movsd xmm12, xmm0
   171                                  
   172                                    ; print input
   173                                    ; mov rax, 1
   174                                    ; mov rdi, debug_msg
   175                                    ; movsd xmm0, xmm12
   176                                    ; call printf
   177                                  
   178                                  ; =============== Print prompt_ohms =====================
   179 0000017D B800000000              mov rax, 0
   180 00000182 48BF-                   mov rdi, prompt_ohms
   180 00000184 [E100000000000000] 
   181 0000018C 48BE-                   mov rsi, stringform
   181 0000018E [D502000000000000] 
   182 00000196 E8(00000000)            call printf
   183                                  
   184                                  ; =============== Get ohm from user =====================
   185                                  ohm_input:
   186 0000019B B800000000                mov rax, 0
   187 000001A0 48BF-                     mov rdi, ohm_array
   187 000001A2 [B400000000000000] 
   188 000001AA BE3C000000                mov rsi, max_size
   189 000001AF 488B1425[00000000]        mov rdx, [stdin]
   190 000001B7 E8(00000000)              call fgets
   191                                  
   192                                    ; remove \n char
   193 000001BC B800000000                mov rax, 0
   194 000001C1 48BF-                     mov rdi, ohm_array
   194 000001C3 [B400000000000000] 
   195 000001CB E8(00000000)              call strlen
   196 000001D0 C680[B3000000]00          mov byte[ohm_array+rax-1], byte 0
   197                                  
   198                                    ; check if input is valid
   199 000001D7 B800000000                mov rax, 0
   200 000001DC 48BF-                     mov rdi, ohm_array
   200 000001DE [B400000000000000] 
   201 000001E6 E8(00000000)              call isfloat          ; rax holds 0 if false and non-0 if true
   202 000001EB 4883F800                  cmp rax, 0
   203 000001EF 0F84A8000000              je invalid
   204                                  
   205                                    ; input is valid
   206 000001F5 B800000000                mov rax, 0
   207 000001FA 48BF-                     mov rdi, ohm_array
   207 000001FC [B400000000000000] 
   208 00000204 E8(00000000)              call atof             ; convert # to xmm0
   209 00000209 F2440F10E8                movsd xmm13, xmm0
   210                                  
   211                                    ; print input
   212                                    ; mov rax, 1
   213                                    ; mov rdi, debug_msg
   214                                    ; movsd xmm0, xmm13
   215                                    ; call printf
   216                                  
   217                                  ; =============== Print prompt_seconds ==================
   218 0000020E B800000000              mov rax, 0
   219 00000213 48BF-                   mov rdi, prompt_seconds
   219 00000215 [3501000000000000] 
   220 0000021D 48BE-                   mov rsi, stringform
   220 0000021F [D502000000000000] 
   221 00000227 E8(00000000)            call printf
   222                                  
   223                                  ; =============== Get time from user ====================
   224                                  time_input:
   225 0000022C B800000000                mov rax, 0
   226 00000231 48BF-                     mov rdi, time_array
   226 00000233 [F000000000000000] 
   227 0000023B BE3C000000                mov rsi, max_size
   228 00000240 488B1425[00000000]        mov rdx, [stdin]
   229 00000248 E8(00000000)              call fgets
   230                                  
   231                                    ; remove \n char
   232 0000024D B800000000                mov rax, 0
   233 00000252 48BF-                     mov rdi, time_array
   233 00000254 [F000000000000000] 
   234 0000025C E8(00000000)              call strlen
   235 00000261 C680[EF000000]00          mov byte[time_array+rax-1], byte 0
   236                                  
   237                                    ; check if input is valid
   238 00000268 B800000000                mov rax, 0
   239 0000026D 48BF-                     mov rdi, time_array
   239 0000026F [F000000000000000] 
   240 00000277 E8(00000000)              call isfloat          ; rax holds 0 if false and non-0 if true
   241 0000027C 4883F800                  cmp rax, 0
   242 00000280 741B                      je invalid
   243                                  
   244                                    ; input is valid
   245 00000282 B800000000                mov rax, 0
   246 00000287 48BF-                     mov rdi, time_array
   246 00000289 [F000000000000000] 
   247 00000291 E8(00000000)              call atof             ; convert # to xmm0
   248 00000296 F2440F10F0                movsd xmm14, xmm0
   249                                  
   250                                    ; print input
   251                                    ; mov rax, 1
   252                                    ; mov rdi, debug_msg
   253                                    ; movsd xmm0, xmm14
   254                                    ; call printf
   255                                  
   256                                  ; =============== Jump to continue if valid =============
   257 0000029B EB23                    jmp continue
   258                                  
   259                                  ; =============== Invalid input =========================
   260                                  invalid:
   261 0000029D B800000000              mov rax, 0
   262 000002A2 48BF-                   mov rdi, invalid_msg
   262 000002A4 [8902000000000000] 
   263 000002AC 48BE-                   mov rsi, stringform
   263 000002AE [D502000000000000] 
   264 000002B6 E8(00000000)            call printf
   265 000002BB E92CFEFFFF              jmp begin_num
   266                                  
   267                                  ; =============== Continue ==============================
   268                                  continue:
   269                                  
   270                                  ; =============== Calculate joules ======================
   271                                  ; =============== W = (V^2) * T / R =====================
   272                                  ; xmm12 = voltage
   273                                  ; xmm13 = ohm
   274                                  ; xmm14 = time
   275 000002C0 F2450F10FC              movsd xmm15, xmm12      ; copy voltage (xmm12) into xmm15
   276 000002C5 F2450F59FC              mulsd xmm15, xmm12      ; voltage (xmm15) * voltage (xmm12) = V^2
   277                                  
   278 000002CA F2450F59FE              mulsd xmm15, xmm14      ; V^2 (xmm15) * T (xmm14)
   279                                  
   280 000002CF F2450F5EFD              divsd xmm15, xmm13      ; [(V^2) * T] / R (xmm13) = W (joules)
   281                                  
   282                                  ; =============== Print thankyou_msg_1 ==================
   283 000002D4 B800000000              mov rax, 0
   284 000002D9 48BF-                   mov rdi, thankyou_msg_1
   284 000002DB [7A01000000000000] 
   285 000002E3 48BE-                   mov rsi, title_array
   285 000002E5 [3C00000000000000] 
   286 000002ED E8(00000000)            call printf
   287                                  
   288                                  ; =============== Print thankyou_msg_2 ==================
   289 000002F2 B801000000              mov rax, 1
   290 000002F7 48BF-                   mov rdi, thankyou_msg_2
   290 000002F9 [9301000000000000] 
   291 00000301 48BE-                   mov rsi, stringform
   291 00000303 [D502000000000000] 
   292 0000030B F2410F10C7              movsd xmm0, xmm15
   293 00000310 E8(00000000)            call printf
   294                                  
   295                                  ; =============== Print congrats_msg_1 ==================
   296 00000315 B800000000              mov rax, 0
   297 0000031A 48BF-                   mov rdi, congrats_msg_1
   297 0000031C [EE01000000000000] 
   298 00000324 48BE-                   mov rsi, name_array
   298 00000326 [0000000000000000] 
   299 0000032E E8(00000000)            call printf
   300                                  
   301                                  ; =============== Print congrats_msg_2 ==================
   302 00000333 B800000000              mov rax, 0
   303 00000338 48BF-                   mov rdi, congrats_msg_2
   303 0000033A [3E02000000000000] 
   304 00000342 48BE-                   mov rsi, title_array
   304 00000344 [3C00000000000000] 
   305 0000034C E8(00000000)            call printf
   306                                  
   307                                  ; =============== Send joules to main ===================
   308 00000351 F2410F10C7              movsd xmm0, xmm15
   309                                  
   310                                  ; =============== Restore GPRs ==========================
   311 00000356 9D                      popf
   312 00000357 415F                    pop r15
   313 00000359 415E                    pop r14
   314 0000035B 415D                    pop r13
   315 0000035D 415C                    pop r12
   316 0000035F 415B                    pop r11
   317 00000361 415A                    pop r10
   318 00000363 4159                    pop r9
   319 00000365 4158                    pop r8
   320 00000367 5F                      pop rdi
   321 00000368 5E                      pop rsi
   322 00000369 5A                      pop rdx
   323 0000036A 59                      pop rcx
   324 0000036B 5B                      pop rbx
   325 0000036C 5D                      pop rbp
   326                                  
   327 0000036D C3                      ret
