     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/1/23
     4                                  ; Subject: CPSC 240-03 Assignment 3 <Sort by Pointers>
     5                                  ; Filename: input_array.asm
     6                                  ; Purpose: This file gets user input of floats in the array.
     7                                  
     8                                  global input_array
     9                                  extern malloc
    10                                  extern scanf
    11                                  
    12                                  segment .data
    13 00000000 256C6600                floatform db "%lf", 0
    14 00000004 257300                  stringform db "%s", 0
    15                                  
    16                                  segment .bss
    17                                  align 64
    18 00000000 <res 00000340>          backuparea resb 832
    19 00000340 <res 00000010>          sendback resq 2
    20                                  
    21                                  segment .text
    22                                  input_array:
    23                                  
    24                                  ; ============= Backup GPRs ============================
    25 00000000 55                      push rbp
    26 00000001 4889E5                  mov rbp, rsp
    27 00000004 53                      push rbx
    28 00000005 51                      push rcx
    29 00000006 52                      push rdx
    30 00000007 56                      push rsi
    31 00000008 57                      push rdi
    32 00000009 4150                    push r8
    33 0000000B 4151                    push r9
    34 0000000D 4152                    push r10
    35 0000000F 4153                    push r11
    36 00000011 4154                    push r12
    37 00000013 4155                    push r13
    38 00000015 4156                    push r14
    39 00000017 4157                    push r15
    40 00000019 9C                      pushf
    41                                  
    42                                  ; =============== xsave =================================
    43 0000001A B80A000000              mov rax, 10
    44 0000001F BA00000000              mov rdx, 0
    45 00000024 0FAE2425[00000000]      xsave [backuparea]
    46                                  
    47                                  ; =============== Backup r14 and r15 ====================
    48 0000002C 4989FE                  mov r14, rdi          ; r14 is the array
    49 0000002F 4989F7                  mov r15, rsi          ; r15 is the size of array
    50 00000032 41BD00000000            mov r13, 0            ; r13 is the starting index 0
    51                                  
    52                                  ; =============== Receive input from user ===============
    53 00000038 4D31ED                  xor r13, r13          ; r13 is the is the starting index 0
    54                                  
    55                                  beginloop:
    56 0000003B 4D39FD                  cmp r13, r15          ; compare index and size of array
    57 0000003E 7D35                    jge endloop           ; end the loop if index >= size of array
    58                                  
    59 00000040 B800000000              mov rax, 0
    60 00000045 BF08000000              mov rdi, 8            ; 8 bytes
    61 0000004A E8(00000000)            call malloc           ; move 8 bytes into heap
    62                                  
    63 0000004F 4989C4                  mov r12, rax
    64 00000052 48BF-                   mov rdi, floatform    ; %lf
    64 00000054 [0000000000000000] 
    65 0000005C 4C89E6                  mov rsi, r12
    66 0000005F E8(00000000)            call scanf            ; receive user input
    67                                  
    68 00000064 4898                    cdqe                  ; convert double to quad and extend
    69 00000066 4883F8FF                cmp rax, -1           ; check for CTRL + D
    70 0000006A 7409                    je endloop            ; jump to ned of loop if CTRL + D
    71                                  
    72 0000006C 4F8924EE                mov [r14+8*r13], r12
    73 00000070 49FFC5                  inc r13               ; increment r13 (i++)
    74 00000073 EBC6                    jmp beginloop         ; start loop again
    75                                  
    76                                  endloop:
    77                                  
    78                                  ; =============== xrstor ================================
    79 00000075 B80A000000              mov rax, 10
    80 0000007A BA00000000              mov rdx, 0
    81 0000007F 0FAE2C25[00000000]      xrstor [backuparea]
    82                                  
    83 00000087 4C89E8                  mov rax, r13
    84                                  
    85                                  ; mov rax, 2
    86                                  ; movsd xmm0, [r14]
    87                                  ; movsd xmm1, [r14+8]
    88                                  
    89                                  ; =============== Restore GPRs ==========================
    90 0000008A 9D                      popf
    91 0000008B 415F                    pop r15
    92 0000008D 415E                    pop r14
    93 0000008F 415D                    pop r13
    94 00000091 415C                    pop r12
    95 00000093 415B                    pop r11
    96 00000095 415A                    pop r10
    97 00000097 4159                    pop r9
    98 00000099 4158                    pop r8
    99 0000009B 5F                      pop rdi
   100 0000009C 5E                      pop rsi
   101 0000009D 5A                      pop rdx
   102 0000009E 59                      pop rcx
   103 0000009F 5B                      pop rbx
   104 000000A0 5D                      pop rbp
   105                                  
   106 000000A1 C3                      ret
