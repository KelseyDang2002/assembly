     1                                  ; Program Name: Sort by Pointers
     2                                  ; Subject: CPSC 240-03 Assignment 3 <Sort by Pointers>
     3                                  ; This program demonstrates passing an array to a called subprogram and sorting it.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Sort by Pointers
    19                                  ;   Program Languages: One module in C++, two in x86-64, two in C, one in bash
    20                                  ;   Due Date: 10/1/23
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This input_array receives user input in Sort by Pointers.
    25                                  ;   This file gets called by director.asm.
    26                                  
    27                                  ; File Information
    28                                  ;   Filename: input_array.asm
    29                                  ;   Language: x86-64 assembly
    30                                  ;   Compile: nasm -f elf64 -l input_array.lis -o input_array.o input_array.asm
    31                                  ;   Link: g++ -m64 -fno-pie -no-pie -std=c++17 -o a.out main.o director.o input_array.o output_array.o sortpointers.o
    32                                  
    33                                  global input_array
    34                                  extern malloc
    35                                  extern scanf
    36                                  
    37                                  segment .data
    38 00000000 256C6600                floatform db "%lf", 0
    39 00000004 257300                  stringform db "%s", 0
    40                                  
    41                                  segment .bss
    42                                  align 64
    43 00000000 <res 00000340>          backuparea resb 832
    44 00000340 <res 00000010>          sendback resq 2
    45                                  
    46                                  segment .text
    47                                  input_array:
    48                                  
    49                                  ; ============= Backup GPRs ============================
    50 00000000 55                      push rbp
    51 00000001 4889E5                  mov rbp, rsp
    52 00000004 53                      push rbx
    53 00000005 51                      push rcx
    54 00000006 52                      push rdx
    55 00000007 56                      push rsi
    56 00000008 57                      push rdi
    57 00000009 4150                    push r8
    58 0000000B 4151                    push r9
    59 0000000D 4152                    push r10
    60 0000000F 4153                    push r11
    61 00000011 4154                    push r12
    62 00000013 4155                    push r13
    63 00000015 4156                    push r14
    64 00000017 4157                    push r15
    65 00000019 9C                      pushf
    66                                  
    67                                  ; =============== xsave =================================
    68 0000001A B80A000000              mov rax, 10
    69 0000001F BA00000000              mov rdx, 0
    70 00000024 0FAE2425[00000000]      xsave [backuparea]
    71                                  
    72                                  ; =============== Backup r14 and r15 ====================
    73 0000002C 4989FE                  mov r14, rdi          ; r14 is the array
    74 0000002F 4989F7                  mov r15, rsi          ; r15 is the size of array
    75 00000032 41BD00000000            mov r13, 0            ; r13 is the starting index 0
    76                                  
    77                                  ; =============== Receive input from user ===============
    78 00000038 4D31ED                  xor r13, r13          ; r13 is the is the starting index 0
    79                                  
    80                                  beginloop:
    81 0000003B 4D39FD                  cmp r13, r15          ; compare index and size of array
    82 0000003E 7D35                    jge endloop           ; end the loop if index >= size of array
    83                                  
    84 00000040 B800000000              mov rax, 0
    85 00000045 BF08000000              mov rdi, 8            ; 8 bytes
    86 0000004A E8(00000000)            call malloc           ; move 8 bytes into heap
    87                                  
    88 0000004F 4989C4                  mov r12, rax
    89 00000052 48BF-                   mov rdi, floatform    ; %lf
    89 00000054 [0000000000000000] 
    90 0000005C 4C89E6                  mov rsi, r12
    91 0000005F E8(00000000)            call scanf            ; receive user input
    92                                  
    93 00000064 4898                    cdqe                  ; convert double to quad and extend
    94 00000066 4883F8FF                cmp rax, -1           ; check for CTRL + D
    95 0000006A 7409                    je endloop            ; jump to ned of loop if CTRL + D
    96                                  
    97 0000006C 4F8924EE                mov [r14+8*r13], r12
    98 00000070 49FFC5                  inc r13               ; increment r13 (i++)
    99 00000073 EBC6                    jmp beginloop         ; start loop again
   100                                  
   101                                  endloop:
   102                                  
   103                                  ; =============== xrstor ================================
   104                                  ; mov rax, 10
   105                                  ; mov rdx, 0
   106                                  ; xrstor [backuparea]
   107                                  
   108 00000075 4C89E8                  mov rax, r13
   109                                  
   110                                  ; mov rax, 2
   111                                  ; movsd xmm0, [r14]
   112                                  ; movsd xmm1, [r14+8]
   113                                  
   114                                  ; =============== Restore GPRs ==========================
   115 00000078 9D                      popf
   116 00000079 415F                    pop r15
   117 0000007B 415E                    pop r14
   118 0000007D 415D                    pop r13
   119 0000007F 415C                    pop r12
   120 00000081 415B                    pop r11
   121 00000083 415A                    pop r10
   122 00000085 4159                    pop r9
   123 00000087 4158                    pop r8
   124 00000089 5F                      pop rdi
   125 0000008A 5E                      pop rsi
   126 0000008B 5A                      pop rdx
   127 0000008C 59                      pop rcx
   128 0000008D 5B                      pop rbx
   129 0000008E 5D                      pop rbp
   130                                  
   131 0000008F C3                      ret
