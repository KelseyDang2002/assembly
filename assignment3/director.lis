     1                                  ; Program Name: Sort by Pointers
     2                                  ; Subject: CPSC 240-03 Assignment 3 <Sort by Pointers>
     3                                  ; This program demonstrates passing an array to a called subprogram and sorting it.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: Sort by Pointers
    19                                  ;   Program Languages: One module in C++, two in x86-64, two in C, one in bash
    20                                  ;   Due Date: 10/1/23
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This file sorts elements in the array in ascending order in Sort by Pointers.
    25                                  ;   This file gets called by director.asm.
    26                                  
    27                                  ; File Information
    28                                  ;   Filename: challenge_sort.asm
    29                                  ;   Language: x86-64 assembly
    30                                  ;   Compile: nasm -f elf64 -l director.lis -o challenge_sort.o challenge_sort.asm
    31                                  ;   Link: g++ -m64 -fno-pie -no-pie -std=c++17 -o a.out main.o director.o input_array.o output_array.o sortpointers.o
    32                                  
    33                                  global challenge_sort
    34                                  extern printf
    35                                  
    36                                  segment .data
    37 00000000 6368616C6C656E6765-     debug_msg db "challenge_sort: called", 10, 0
    37 00000009 5F736F72743A206361-
    37 00000012 6C6C65640A00       
    38                                  
    39 00000018 257300                  stringform db "%s", 0
    40                                  
    41                                  segment .bss
    42                                  align 64
    43 00000000 <res 00000340>          backuparea resb 832
    44                                  
    45                                  segment .text
    46                                  challenge_sort:
    47                                  
    48                                  ; ============= Backup GPRs ============================
    49 00000000 55                      push rbp
    50 00000001 4889E5                  mov rbp, rsp
    51 00000004 53                      push rbx
    52 00000005 51                      push rcx
    53 00000006 52                      push rdx
    54 00000007 56                      push rsi
    55 00000008 57                      push rdi
    56 00000009 4150                    push r8
    57 0000000B 4151                    push r9
    58 0000000D 4152                    push r10
    59 0000000F 4153                    push r11
    60 00000011 4154                    push r12
    61 00000013 4155                    push r13
    62 00000015 4156                    push r14
    63 00000017 4157                    push r15
    64 00000019 9C                      pushf
    65                                  
    66                                  ; =============== xsave =================================
    67                                  ; mov rax, 10
    68                                  ; mov rdx, 0
    69                                  ; xsave [backuparea]
    70                                  
    71                                  ; =============== test call =============================
    72                                  ; mov rax, 0
    73                                  ; mov rdi, stringform
    74                                  ; mov rsi, debug_msg
    75                                  ; call printf
    76                                  
    77                                  ; =============== Backup r14 and r15 ====================
    78 0000001A 4989FE                  mov r14, rdi          ; r14 is the array
    79 0000001D 4989F7                  mov r15, rsi          ; r15 is the size of the array
    80 00000020 49C7C5FFFFFFFF          mov r13, -1           ; index for outter loop (step)
    81 00000027 41BC00000000            mov r12, 0            ; index for inner loop (i)
    82                                  
    83                                  ; =============== challenge_sort ========================
    84                                  outerloop:
    85 0000002D 49FFC5                  inc r13               ; r13 is now index 0
    86 00000030 4D39FD                  cmp r13, r15          ; compare index and size of array
    87 00000033 7D45                    jge endloop           ; end loop if index >= size of array
    88                                  
    89 00000035 41BC00000000            mov r12, 0            ; resets counter of inner loop (i)
    90 0000003B EB00                    jmp innerloop         ; continue to inner loop
    91                                  
    92                                  innerloop:
    93 0000003D 4D89FB                  mov r11, r15          ; copy r15 (size) into r11
    94 00000040 4D29EB                  sub r11, r13          ; r11 is size - step (r15 - r13)
    95 00000043 4D39DC                  cmp r12, r11          ; compare i with (size - step)
    96 00000046 7DE5                    jge outerloop
    97                                  
    98 00000048 4F8D14E6                lea r10, [r14+8*r12]  ; **array[i]
    99 0000004C F2450F103A              movsd xmm15, [r10]
   100 00000051 49FFC4                  inc r12
   101 00000054 4F8D4CE608              lea r9, [r14+8*(r12+1)] ; **array[i + 1]
   102 00000059 F2450F1031              movsd xmm14, [r9]
   103 0000005E 66450F2EFE              ucomisd xmm15, xmm14
   104 00000063 7D00                    jge swap
   105                                  
   106                                  swap:
   107                                  ; mov rbx, [r10]
   108                                  ; mov rcx, [r9]
   109                                  ;
   110                                  ; mov [r10], rcx
   111                                  ; mov [r9], rbx
   112                                  
   113 00000065 4D89E0                  mov r8, r12
   114 00000068 F2470F113CC6            movsd [r14+8*r8], xmm15
   115 0000006E 4983C001                add r8, 1
   116 00000072 F2470F1134C6            movsd [r14+8*r8], xmm14
   117 00000078 EBC3                    jmp innerloop
   118                                  
   119                                  endloop:
   120                                  ; =============== xrstor ================================
   121                                  ; mov rax, 10
   122                                  ; mov rdx, 0
   123                                  ; xrstor [backuparea]
   124                                  
   125 0000007A 4C89F0                  mov rax, r14
   126                                  
   127                                  ; mov rax, 2
   128                                  ; movsd xmm0, xmm15
   129                                  ; movsd xmm1, xmm14
   130                                  
   131                                  ; =============== Restore GPRs ==========================
   132 0000007D 9D                      popf
   133 0000007E 415F                    pop r15
   134 00000080 415E                    pop r14
   135 00000082 415D                    pop r13
   136 00000084 415C                    pop r12
   137 00000086 415B                    pop r11
   138 00000088 415A                    pop r10
   139 0000008A 4159                    pop r9
   140 0000008C 4158                    pop r8
   141 0000008E 5F                      pop rdi
   142 0000008F 5E                      pop rsi
   143 00000090 5A                      pop rdx
   144 00000091 59                      pop rcx
   145 00000092 5B                      pop rbx
   146 00000093 5D                      pop rbp
   147                                  
   148 00000094 C3                      ret
