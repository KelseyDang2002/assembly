     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/1/23
     4                                  ; Subject: CPSC 240-03 Assignment 3 <Sort by Pointers>
     5                                  ; Filename: director.asm
     6                                  ; Purpose: This file calls input_array, output_array, and sortpointers in Sort by Pointers.
     7                                  ; Then director.asm gets called by the main.cpp.
     8                                  
     9                                  global director
    10                                  extern input_array
    11                                  ; extern output_array
    12                                  ; extern sortpointers
    13                                  extern printf
    14                                  max_size equ 10
    15                                  
    16                                  segment .data
    17 00000000 6469726563746F723A-     welcome_msg db "director: This program will sort all of your doubles.", 10, 0
    17 00000009 20546869732070726F-
    17 00000012 6772616D2077696C6C-
    17 0000001B 20736F727420616C6C-
    17 00000024 206F6620796F757220-
    17 0000002D 646F75626C65732E0A-
    17 00000036 00                 
    18                                  
    19 00000037 6469726563746F723A-     instruction_msg1 db "director: Please enter flocating point numbers seperated by white space.", 10, 0
    19 00000040 20506C656173652065-
    19 00000049 6E74657220666C6F63-
    19 00000052 6174696E6720706F69-
    19 0000005B 6E74206E756D626572-
    19 00000064 732073657065726174-
    19 0000006D 656420627920776869-
    19 00000076 74652073706163652E-
    19 0000007F 0A00               
    20                                  
    21 00000081 6469726563746F723A-     instruction_msg2 db "director: After the last numeric input, enter at least one more WS followed by CTRL + D:", 10, 0
    21 0000008A 204166746572207468-
    21 00000093 65206C617374206E75-
    21 0000009C 6D6572696320696E70-
    21 000000A5 75742C20656E746572-
    21 000000AE 206174206C65617374-
    21 000000B7 206F6E65206D6F7265-
    21 000000C0 20575320666F6C6C6F-
    21 000000C9 776564206279204354-
    21 000000D2 524C202B20443A0A00 
    22                                  
    23 000000DB 6469726563746F723A-     thanks_msg db "director: Thank you. You entered these numbers:", 10, 10, 0
    23 000000E4 205468616E6B20796F-
    23 000000ED 752E20596F7520656E-
    23 000000F6 746572656420746865-
    23 000000FF 7365206E756D626572-
    23 00000108 733A0A0A00         
    24                                  
    25 0000010D 0A6469726563746F72-     output_end_msg db 10, "director: End of output array.", 10, 10, 0
    25 00000116 3A20456E64206F6620-
    25 0000011F 6F7574707574206172-
    25 00000128 7261792E0A0A00     
    26                                  
    27 0000012F 6469726563746F723A-     sorting_msg db "director: The array is now being sorted without moving any numbers...", 10, 0
    27 00000138 205468652061727261-
    27 00000141 79206973206E6F7720-
    27 0000014A 6265696E6720736F72-
    27 00000153 74656420776974686F-
    27 0000015C 7574206D6F76696E67-
    27 00000165 20616E79206E756D62-
    27 0000016E 6572732E2E2E0A00   
    28                                  
    29 00000176 6469726563746F723A-     output_sort_msg db "director: The data in the array are now ordered as follows:", 10, 10, 0
    29 0000017F 205468652064617461-
    29 00000188 20696E207468652061-
    29 00000191 727261792061726520-
    29 0000019A 6E6F77206F72646572-
    29 000001A3 656420617320666F6C-
    29 000001AC 6C6F77733A0A0A00   
    30                                  
    31 000001B4 6469726563746F723A-     exit_msg db "director: The array will be sent back to the caller function.", 10, 0
    31 000001BD 205468652061727261-
    31 000001C6 792077696C6C206265-
    31 000001CF 2073656E7420626163-
    31 000001D8 6B20746F2074686520-
    31 000001E1 63616C6C6572206675-
    31 000001EA 6E6374696F6E2E0A00 
    32                                  
    33 000001F3 256C6600                floatform db "%lf", 0
    34 000001F7 257300                  stringform db "%s", 0
    35                                  
    36                                  segment .bss
    37                                  align 64
    38 00000000 <res 00000340>          backuparea resb 832
    39 00000340 <res 00000050>          array resq max_size
    40                                  
    41                                  segment .text
    42                                  director:
    43                                  
    44                                  ; ============= Backup GPRs ============================
    45 00000000 55                      push rbp
    46 00000001 4889E5                  mov rbp, rsp
    47 00000004 53                      push rbx
    48 00000005 51                      push rcx
    49 00000006 52                      push rdx
    50 00000007 56                      push rsi
    51 00000008 57                      push rdi
    52 00000009 4150                    push r8
    53 0000000B 4151                    push r9
    54 0000000D 4152                    push r10
    55 0000000F 4153                    push r11
    56 00000011 4154                    push r12
    57 00000013 4155                    push r13
    58 00000015 4156                    push r14
    59 00000017 4157                    push r15
    60 00000019 9C                      pushf
    61                                  
    62                                  ; =============== xsave =================================
    63                                  ; mov rax, 10
    64                                  ; mov rdx, 0
    65                                  ; xsave [backuparea]
    66                                  
    67                                  ; =============== Print welcome_msg =====================
    68 0000001A B800000000              mov rax, 0
    69 0000001F 48BF-                   mov rdi, stringform
    69 00000021 [F701000000000000] 
    70 00000029 48BE-                   mov rsi, welcome_msg
    70 0000002B [0000000000000000] 
    71 00000033 E8(00000000)            call printf
    72                                  
    73                                  ; =============== Print instruction_msg1 ================
    74 00000038 B800000000              mov rax, 0
    75 0000003D 48BF-                   mov rdi, stringform
    75 0000003F [F701000000000000] 
    76 00000047 48BE-                   mov rsi, instruction_msg1
    76 00000049 [3700000000000000] 
    77 00000051 E8(00000000)            call printf
    78                                  
    79                                  ; =============== Print instruction_msg2 ================
    80 00000056 B800000000              mov rax, 0
    81 0000005B 48BF-                   mov rdi, stringform
    81 0000005D [F701000000000000] 
    82 00000065 48BE-                   mov rsi, instruction_msg2
    82 00000067 [8100000000000000] 
    83 0000006F E8(00000000)            call printf
    84                                  
    85                                  ; =============== Call input_array ======================
    86 00000074 B800000000              mov rax, 0
    87 00000079 48BF-                   mov rdi, array
    87 0000007B [4003000000000000] 
    88 00000083 BE0A000000              mov rsi, max_size
    89 00000088 E8(00000000)            call input_array
    90 0000008D 4989C6                  mov r14, rax ; r14 holds the number of values stored in array
    91                                  
    92                                  ; =============== Print thanks_msg ======================
    93 00000090 B800000000              mov rax, 0
    94 00000095 48BF-                   mov rdi, stringform
    94 00000097 [F701000000000000] 
    95 0000009F 48BE-                   mov rsi, thanks_msg
    95 000000A1 [DB00000000000000] 
    96 000000A9 E8(00000000)            call printf
    97                                  
    98                                  ; =============== Call output_array =====================
    99                                  ; TODO
   100                                  
   101                                  ; =============== Print output_end_msg ==================
   102 000000AE B800000000              mov rax, 0
   103 000000B3 48BF-                   mov rdi, stringform
   103 000000B5 [F701000000000000] 
   104 000000BD 48BE-                   mov rsi, output_end_msg
   104 000000BF [0D01000000000000] 
   105 000000C7 E8(00000000)            call printf
   106                                  
   107                                  ; =============== Print sorting_msg =====================
   108 000000CC B800000000              mov rax, 0
   109 000000D1 48BF-                   mov rdi, stringform
   109 000000D3 [F701000000000000] 
   110 000000DB 48BE-                   mov rsi, sorting_msg
   110 000000DD [2F01000000000000] 
   111 000000E5 E8(00000000)            call printf
   112                                  
   113                                  ; =============== Call sortpointers =====================
   114                                  ; TODO
   115                                  
   116                                  ; =============== Print output_sort_msg =================
   117 000000EA B800000000              mov rax, 0
   118 000000EF 48BF-                   mov rdi, stringform
   118 000000F1 [F701000000000000] 
   119 000000F9 48BE-                   mov rsi, output_sort_msg
   119 000000FB [7601000000000000] 
   120 00000103 E8(00000000)            call printf
   121                                  
   122                                  ; =============== Call output_array =====================
   123                                  ; TODO
   124                                  
   125                                  ; =============== Print output_end_msg ==================
   126 00000108 B800000000              mov rax, 0
   127 0000010D 48BF-                   mov rdi, stringform
   127 0000010F [F701000000000000] 
   128 00000117 48BE-                   mov rsi, output_end_msg
   128 00000119 [0D01000000000000] 
   129 00000121 E8(00000000)            call printf
   130                                  
   131                                  ; =============== Print exit_msg ========================
   132 00000126 B800000000              mov rax, 0
   133 0000012B 48BF-                   mov rdi, stringform
   133 0000012D [F701000000000000] 
   134 00000135 48BE-                   mov rsi, exit_msg
   134 00000137 [B401000000000000] 
   135 0000013F E8(00000000)            call printf
   136                                  
   137                                  ; =============== Return execution to driver ============
   138 00000144 F20F100424              movsd xmm0, [rsp]
   139                                  
   140                                  ; =============== xrstor ================================
   141                                  ; mov rax, 10
   142                                  ; mov rdx, 0
   143                                  ; xrstor [backuparea]
   144                                  
   145                                  ; =============== Restore GPRs ==========================
   146 00000149 9D                      popf
   147 0000014A 415F                    pop r15
   148 0000014C 415E                    pop r14
   149 0000014E 415D                    pop r13
   150 00000150 415C                    pop r12
   151 00000152 415B                    pop r11
   152 00000154 415A                    pop r10
   153 00000156 4159                    pop r9
   154 00000158 4158                    pop r8
   155 0000015A 5F                      pop rdi
   156 0000015B 5E                      pop rsi
   157 0000015C 5A                      pop rdx
   158 0000015D 59                      pop rcx
   159 0000015E 5B                      pop rbx
   160 0000015F 5D                      pop rbp
   161                                  
   162 00000160 C3                      ret
