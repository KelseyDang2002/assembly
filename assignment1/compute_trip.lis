     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  segment .data
    12                                  ; Constants
    13 00000000 20202020506C656173-     initial_msg db "    Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 6520656E7465722074-
    13 00000012 686520737065656420-
    13 0000001B 666F72207468652069-
    13 00000024 6E697469616C207365-
    13 0000002D 676D656E74206F6620-
    13 00000036 746865207472697020-
    13 0000003F 286D7068293A2000   
    14                                  initial_msg_len equ $-initial_msg
    15                                  
    16 00000047 20202020466F722068-     miles_msg db "    For how many miles will you maintain this average speed: ", 0
    16 00000050 6F77206D616E79206D-
    16 00000059 696C65732077696C6C-
    16 00000062 20796F75206D61696E-
    16 0000006B 7461696E2074686973-
    16 00000074 206176657261676520-
    16 0000007D 73706565643A2000   
    17                                  miles_msg_len equ $-miles_msg
    18                                  
    19 00000085 202020205768617420-     final_seg_msg db "    What will be your speed during the final segment of the trip (mph): ", 0
    19 0000008E 77696C6C2062652079-
    19 00000097 6F7572207370656564-
    19 000000A0 20647572696E672074-
    19 000000A9 68652066696E616C20-
    19 000000B2 7365676D656E74206F-
    19 000000BB 662074686520747269-
    19 000000C4 7020286D7068293A20-
    19 000000CD 00                 
    20                                  final_seg_msg_len equ $-final_seg_msg
    21                                  
    22 000000CE 20202020596F757220-     avg_speed_msg db "    Your average speed will be %1.5lf mph.", 10, 0
    22 000000D7 617665726167652073-
    22 000000E0 706565642077696C6C-
    22 000000E9 2062652025312E356C-
    22 000000F2 66206D70682E0A00   
    23                                  avg_speed_msg_len equ $-avg_speed_msg
    24                                  
    25 000000FA 202020205468652074-     total_msg db "    The total travel time will be %1.2lf hours.", 10, 0
    25 00000103 6F74616C2074726176-
    25 0000010C 656C2074696D652077-
    25 00000115 696C6C206265202531-
    25 0000011E 2E326C6620686F7572-
    25 00000127 732E0A00           
    26                                  total_msg_len equ $-total_msg
    27                                  
    28 0000012B 20202020496E76616C-     invalid_msg db "    Invalid number. Try again.", 10, 0
    28 00000134 6964206E756D626572-
    28 0000013D 2E2054727920616761-
    28 00000146 696E2E0A00         
    29                                  invalid_msg_len equ $-invalid_msg
    30                                  
    31 0000014B 202020204465627567-     debug db "    Debug: %1.2lf", 10, 10, 0
    31 00000154 3A2025312E326C660A-
    31 0000015D 0A00               
    32                                  debug_len equ $-debug
    33                                  
    34 0000015F 256C6600                floatform db "%lf", 0
    35 00000163 257300                  stringform db "%s", 0
    36 00000166 0000000000B06F40        hotel_distance dq 253.5
    37                                  
    38                                  segment .bss
    39                                  align 64
    40 00000000 <res 00000340>          backuparea resb 832
    41                                  
    42 00000340 <res 00000008>          first_speed: resq 1
    43 00000348 <res 00000008>          first_leg: resq 1
    44 00000350 <res 00000008>          first_time: resq 1
    45                                  
    46 00000358 <res 00000008>          second_speed: resq 1
    47 00000360 <res 00000008>          second_leg: resq 1
    48 00000368 <res 00000008>          second_time: resq 1
    49                                  
    50 00000370 <res 00000008>          avg_speed: resq 1
    51 00000378 <res 00000008>          total_time: resq 1
    52                                  
    53                                  segment .text
    54                                  las_vegas:                ; start here
    55                                  
    56                                  ; ============= Backup GPRs ============================
    57 00000000 55                      push rbp
    58 00000001 4889E5                  mov rbp, rsp
    59 00000004 53                      push rbx
    60 00000005 51                      push rcx
    61 00000006 52                      push rdx
    62 00000007 56                      push rsi
    63 00000008 57                      push rdi
    64 00000009 4150                    push r8
    65 0000000B 4151                    push r9
    66 0000000D 4152                    push r10
    67 0000000F 4153                    push r11
    68 00000011 4154                    push r12
    69 00000013 4155                    push r13
    70 00000015 4156                    push r14
    71 00000017 4157                    push r15
    72 00000019 9C                      pushf
    73                                  
    74                                  ; =============== First speed ================================
    75                                  
    76                                  ; Prompt for input of initial distance
    77 0000001A B800000000              mov rax, 0
    78 0000001F 48BF-                   mov rdi, stringform       ; "%s"
    78 00000021 [6301000000000000] 
    79 00000029 48BE-                   mov rsi, initial_msg
    79 0000002B [0000000000000000] 
    80 00000033 E8(00000000)            call printf
    81                                  
    82                                  ; Get initial from user
    83 00000038 B800000000              mov rax, 0
    84 0000003D 48BF-                   mov rdi, floatform        ; "%lf"
    84 0000003F [5F01000000000000] 
    85 00000047 4889E6                  mov rsi, rsp
    86 0000004A E8(00000000)            call scanf
    87 0000004F F2440F100424            movsd xmm8, [rsp]
    88                                  
    89                                  ; Print initial from user
    90                                  ; mov rax, 1
    91                                  ; mov rdi, debug
    92                                  ; call printf
    93                                  ; End of block
    94                                  
    95                                  ; =============== First leg ===================================
    96                                  
    97                                  ; Prompt for input of miles maintained
    98 00000055 B800000000              mov rax, 0
    99 0000005A 48BF-                   mov rdi, stringform       ; "%s"
    99 0000005C [6301000000000000] 
   100 00000064 48BE-                   mov rsi, miles_msg
   100 00000066 [4700000000000000] 
   101 0000006E E8(00000000)            call printf
   102                                  
   103                                  ; Get miles from user
   104 00000073 B800000000              mov rax, 0
   105 00000078 48BF-                   mov rdi, floatform
   105 0000007A [5F01000000000000] 
   106 00000082 4889E6                  mov rsi, rsp
   107 00000085 E8(00000000)            call scanf
   108 0000008A F2440F100C24            movsd xmm9, [rsp]
   109                                  
   110                                  ; Print miles from user
   111                                  ; mov rax, 1
   112                                  ; mov rdi, debug
   113                                  ; call printf
   114                                  ; End of block
   115                                  
   116                                  ; ================= Second speed =============================
   117                                  
   118                                  ; Prompt for input of final speed
   119 00000090 B800000000              mov rax, 0
   120 00000095 48BF-                   mov rdi, stringform       ; "%s"
   120 00000097 [6301000000000000] 
   121 0000009F 48BE-                   mov rsi, final_seg_msg
   121 000000A1 [8500000000000000] 
   122 000000A9 E8(00000000)            call printf
   123                                  
   124                                  ; Get final_seg from user
   125 000000AE B800000000              mov rax, 0
   126 000000B3 48BF-                   mov rdi, floatform
   126 000000B5 [5F01000000000000] 
   127 000000BD 4889E6                  mov rsi, rsp
   128 000000C0 E8(00000000)            call scanf
   129 000000C5 F2440F101424            movsd xmm10, [rsp]
   130                                  
   131                                  ; Print final_seg from user
   132                                  ; mov rax, 1
   133                                  ; mov rdi, debug
   134                                  ; call printf
   135                                  ; End of block
   136                                  
   137                                  ; ================= Move variables into xmm registers ==============
   138                                  ; movsd xmm8, qword [first_speed]
   139                                  ; movsd xmm9, qword [first_leg]
   140                                  ; movsd xmm10, qword [second_speed]
   141                                  
   142                                  ; ================= First leg / first speed ==================
   143                                  ; xmm8 = first speed
   144                                  ; xmm9 = first leg
   145                                  ; xmm10 = second_speed
   146 000000CB F2450F10D9              movsd xmm11, xmm9                 ; copy xmm9 into xmm11 for later use
   147 000000D0 F2450F5EC8              divsd xmm9, xmm8                  ; xmm9 = xmm9 / xmm8 (xmm9 = first_time)
   148                                  ; movsd xmm13, qword [hotel_distance] ; xmm13 = 253.5
   149                                  ; subsd xmm13, xmm9               ; xmm13 = xmm13 / xmm9 (xmm13 = second_leg)
   150                                  ; divsd xmm13, xmm10              ; xmm13 = xmm13 / xmm10 (xmm13 = second_time)
   151                                  ; divsd xmm9, xmm8                ; xmm9 = xmm9 / xmm8 (xmm9 = first_time)
   152                                  ; addsd xmm13, xmm9               ; xmm13 = xmm13 + xmm9 (total travel time = second_time + first_time)
   153                                  ; addsd xmm8, xmm10
   154                                  ; divsd xmm13, xmm8
   155                                  
   156                                  ; ================= Second leg = 253.5 - first leg ===========
   157 000000D5 F2440F102425-           movsd xmm12, qword [hotel_distance] ; xmm12 = 253.5
   157 000000DB [66010000]         
   158 000000DF F2450F10EC              movsd xmm13, xmm12                ; copy xmm12 into xmm13 for later use
   159 000000E4 F2450F5CE3              subsd xmm12, xmm11                ; xmm12 = xmm12 - xmm11 (xmm12 = second leg)
   160                                  ; movsd xmm9, qword [first_leg]
   161                                  
   162                                  ; ============= Second leg / second speed =======================
   163                                  ; xmm10 = second speed
   164                                  ; xmm12 = second leg
   165 000000E9 F2450F5EE2              divsd xmm12, xmm10                ; xmm12 = xmm12 / xmm10 (xmm12 = second_time)
   166                                  ; movsd qword [second_time], xmm11 ; copy xmm11 into second_time variable for later use
   167                                  
   168                                  ; ============= Total travel time ===============================
   169                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   170                                  ; total travel time = first_time + second_time
   171                                  ; xmm9 = first_time
   172                                  ; xmm12 = second_time
   173 000000EE F2450F58E1              addsd xmm12, xmm9                 ; xmm12 = xmm12 + xmm9 (total travel time)
   174                                  ; movsd qword [total_time], xmm11 ; copy xmm11 into total_time variable for output
   175                                  
   176                                  ; ============= Average speed ===================================
   177                                  ; average speed = 253.5 / total travel time
   178                                  ; xmm12 = total travel time
   179                                  ; xmm13 = 253.5
   180                                  ; movsd xmm12, qword [hotel_distance]
   181 000000F3 F2450F5EEC              divsd xmm13, xmm12                ; xmm13 = xmm13 / xmm12 (xmm13 = average speed)
   182                                  ; movsd xmm12, qword [hotel_distance]
   183                                  ; movsd qword [avg_speed], xmm12 ; copy xmm12 into avg_speed variable for output
   184                                  
   185                                  ; ============= Output avg_speed_msg ============================
   186 000000F8 F2410F10C5              movsd xmm0, xmm13
   187 000000FD B801000000              mov rax, 1
   188 00000102 48BF-                   mov rdi, avg_speed_msg
   188 00000104 [CE00000000000000] 
   189 0000010C E8(00000000)            call printf
   190                                  
   191                                  ; ============= Output total travel time ========================
   192 00000111 F2410F10C4              movsd xmm0, xmm12
   193 00000116 B801000000              mov rax, 1
   194 0000011B 48BF-                   mov rdi, total_msg
   194 0000011D [FA00000000000000] 
   195 00000125 E8(00000000)            call printf
   196                                  ; End of block
   197                                  
   198                                  ; Set return value
   199 0000012A F20F100424              movsd xmm0, [rsp]
   200                                  
   201                                  ; =============== Restore GPRs ==========================
   202 0000012F 9D                      popf
   203 00000130 415F                    pop r15
   204 00000132 415E                    pop r14
   205 00000134 415D                    pop r13
   206 00000136 415C                    pop r12
   207 00000138 415B                    pop r11
   208 0000013A 415A                    pop r10
   209 0000013C 4159                    pop r9
   210 0000013E 4158                    pop r8
   211 00000140 5F                      pop rdi
   212 00000141 5E                      pop rsi
   213 00000142 5A                      pop rdx
   214 00000143 59                      pop rcx
   215 00000144 5B                      pop rbx
   216 00000145 5D                      pop rbp
   217                                  
   218 00000146 C3                      ret
