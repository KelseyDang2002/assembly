     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  section .data
    12                                    ; Constants
    13 00000000 506C6561736520656E-       initial_msg db "Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 746572207468652073-
    13 00000012 7065656420666F7220-
    13 0000001B 74686520696E697469-
    13 00000024 616C207365676D656E-
    13 0000002D 74206F662074686520-
    13 00000036 7472697020286D7068-
    13 0000003F 293A2000           
    14                                    initial_msg_len equ $-initial_msg
    15                                  
    16 00000043 496E697469616C2065-       initial_output db "Initial entered: %1.18lf", 10, 0
    16 0000004C 6E74657265643A2025-
    16 00000055 312E31386C660A00   
    17                                    initial_output_len equ $-initial_output
    18                                  
    19 0000005D 466F7220686F77206D-       miles_msg db "For how many miles will you maintain this average speed: ", 0
    19 00000066 616E79206D696C6573-
    19 0000006F 2077696C6C20796F75-
    19 00000078 206D61696E7461696E-
    19 00000081 207468697320617665-
    19 0000008A 726167652073706565-
    19 00000093 643A2000           
    20                                    miles_msg_len equ $-miles_msg
    21                                  
    22 00000097 4D696C6573206D6169-       miles_output db "Miles maintained entered: ", 10, 0
    22 000000A0 6E7461696E65642065-
    22 000000A9 6E74657265643A200A-
    22 000000B2 00                 
    23                                    miles_output_len equ $-miles_output
    24                                  
    25 000000B3 576861742077696C6C-       final_seg_msg db "What will be your speed during the final segment of the trip (mph): ", 0
    25 000000BC 20626520796F757220-
    25 000000C5 737065656420647572-
    25 000000CE 696E67207468652066-
    25 000000D7 696E616C207365676D-
    25 000000E0 656E74206F66207468-
    25 000000E9 65207472697020286D-
    25 000000F2 7068293A2000       
    26                                    final_seg_msg_len equ $-final_seg_msg
    27                                  
    28 000000F8 46696E616C20737065-       final_output db "Final speed entered: ", 10, 0
    28 00000101 656420656E74657265-
    28 0000010A 643A200A00         
    29                                    final_output_len equ $-final_output
    30                                  
    31 0000010F 596F75722061766572-       avg_speed_msg db "Your average speed will be %1.18lf mph.", 10, 0
    31 00000118 616765207370656564-
    31 00000121 2077696C6C20626520-
    31 0000012A 25312E31386C66206D-
    31 00000133 70682E0A00         
    32                                    avg_speed_msg_len equ $-avg_speed_msg
    33                                  
    34 00000138 54686520746F74616C-       total_msg db "The total travel time will be %1.18lf hours.", 10, 0
    34 00000141 2074726176656C2074-
    34 0000014A 696D652077696C6C20-
    34 00000153 62652025312E31386C-
    34 0000015C 6620686F7572732E0A-
    34 00000165 00                 
    35                                    total_msg_len equ $-total_msg
    36                                  
    37 00000166 496E76616C6964206E-       invalid_msg db "Invalid number. Try again.", 10, 0
    37 0000016F 756D6265722E205472-
    37 00000178 7920616761696E2E0A-
    37 00000181 00                 
    38                                    invalid_msg_len equ $-invalid_msg
    39                                  
    40 00000182 256C6600                  floatform db "%lf", 0
    41 00000186 257300                    stringform db "%s", 0
    42 00000189 0000000000B06F40          hotel_distance dq 253.5
    43 00000191 0000000000000840          three dq 3.0
    44                                  
    45                                  section .bss
    46                                    align 64
    47 00000000 <res 00000340>            backuparea resb 832
    48                                  
    49                                  section .text
    50                                  las_vegas:                ; start here
    51                                  
    52                                    ; Backup GPRs
    53 00000000 55                        push rbp
    54 00000001 4889E5                    mov rbp, rsp
    55 00000004 53                        push rbx
    56 00000005 51                        push rcx
    57 00000006 52                        push rdx
    58 00000007 56                        push rsi
    59 00000008 57                        push rdi
    60 00000009 4150                      push r8
    61 0000000B 4151                      push r9
    62 0000000D 4152                      push r10
    63 0000000F 4153                      push r11
    64 00000011 4154                      push r12
    65 00000013 4155                      push r13
    66 00000015 4156                      push r14
    67 00000017 4157                      push r15
    68 00000019 9C                        pushf
    69                                  
    70                                    ; Prompt for input of initial distance
    71 0000001A 6A00                      push qword 0            ; push to top of stack
    72 0000001C B800000000                mov qword rax, 0
    73 00000021 48BF-                     mov rdi, stringform     ; "%s"
    73 00000023 [8601000000000000] 
    74 0000002B 48BE-                     mov rsi, initial_msg
    74 0000002D [0000000000000000] 
    75 00000035 E8(00000000)              call printf
    76                                    ; End of block
    77                                  
    78                                    ; Get initial from user
    79 0000003A 6A00                      push qword 0            ; push to top of stack
    80 0000003C B800000000                mov qword rax, 0
    81 00000041 48BF-                     mov rdi, floatform      ; "%lf"
    81 00000043 [8201000000000000] 
    82 0000004B 4889E6                    mov rsi, rsp
    83 0000004E E8(00000000)              call scanf
    84 00000053 F2440F100424              movsd xmm8, [rsp]       ; dereference rsp and copy to xmm8
    85 00000059 58                        pop rax                 ; restore stack
    86                                    ; End of block
    87                                  
    88                                    ; ; Block to set xmm12 = 0.0
    89                                    ; push qword 0
    90                                    ; movsd xmm12, [rsp]
    91                                    ; pop rax
    92                                    ; ; End of block
    93                                    ;
    94                                    ; ; Block to check if input is invalid
    95                                    ; ucomisd xmm8, xmm12
    96                                    ; jb negative
    97                                  
    98                                    ; mov rax, 1
    99                                    ; mov rdi, floatform
   100                                    ; mov xmm0, xmm8
   101                                    ; call printf
   102                                    ; jmp continue
   103                                  
   104                                  ; negative:
   105                                    ; mov rax, 0
   106                                    ; mov rdi, invalid_msg
   107                                    ; call printf
   108                                  
   109                                  ; continue:
   110                                  
   111                                    ; Print initial from user
   112 0000005A B800000000                mov rax, 0
   113 0000005F 48BE-                     mov rsi, initial_output
   113 00000061 [4300000000000000] 
   114 00000069 E8(00000000)              call printf
   115                                    ; End of block
   116                                  
   117                                    ; Prompt for input of miles maintained
   118 0000006E B800000000                mov qword rax, 0
   119 00000073 48BF-                     mov rdi, stringform     ; "%s"
   119 00000075 [8601000000000000] 
   120 0000007D 48BE-                     mov rsi, miles_msg
   120 0000007F [5D00000000000000] 
   121 00000087 E8(00000000)              call printf
   122                                    ; End of block
   123                                    ;
   124                                    ; Get miles from user
   125 0000008C 6A00                      push qword 0
   126 0000008E B800000000                mov qword rax, 0
   127 00000093 48BF-                     mov rdi, floatform
   127 00000095 [8201000000000000] 
   128 0000009D 4889E6                    mov rsi, rsp
   129 000000A0 E8(00000000)              call scanf
   130 000000A5 F2440F100C24              movsd xmm9, [rsp]
   131 000000AB 58                        pop rax
   132                                    ; End of block
   133                                    ;
   134                                    ; ; Print miles from user
   135                                    ; mov rax, 0
   136                                    ; mov rsi, miles_output
   137                                    ; call printf
   138                                    ; ; End of block
   139                                    ;
   140                                    ; Prompt for input of final speed
   141 000000AC B800000000                mov qword rax, 0
   142 000000B1 48BF-                     mov rdi, stringform     ; "%s"
   142 000000B3 [8601000000000000] 
   143 000000BB 48BE-                     mov rsi, final_seg_msg
   143 000000BD [B300000000000000] 
   144 000000C5 E8(00000000)              call printf
   145                                    ; End of block
   146                                  
   147                                    ; Get final_seg from user
   148 000000CA 6A00                      push qword 0
   149 000000CC B800000000                mov qword rax, 0
   150 000000D1 48BF-                     mov rdi, floatform
   150 000000D3 [8201000000000000] 
   151 000000DB 4889E6                    mov rsi, rsp
   152 000000DE E8(00000000)              call scanf
   153 000000E3 F2440F101424              movsd xmm10, [rsp]
   154 000000E9 58                        pop rax
   155                                    ; End of block
   156                                    ;
   157                                    ; ; Print final_seg from user
   158                                    ; mov rax, 0
   159                                    ; mov rsi, final_output
   160                                    ; call printf
   161                                    ; ; End of block
   162                                    ;
   163                                    ; ; Block to copy 253.5 into xmm1 and 3.0 into xmm2
   164                                    ; movsd xmm1, qword [hotel_distance]
   165                                    ; movsd xmm2, qword [three]
   166                                    ;
   167                                    ; ; Output avg_speed_msg
   168                                    ; mov rax, 0
   169                                    ; mov rdi, avg_speed_msg
   170                                    ; call printf
   171                                    ; ; End of block
   172                                    ;
   173                                    ; ; Output total travel time
   174                                    ; mov rax, 0
   175                                    ; mov rdi, total_msg
   176                                    ; call printf
   177                                    ; ; End of block
   178                                  
   179                                    ; Block to set return value
   180                                  setreturnvalue:
   181 000000EA 4156                      push r14
   182 000000EC F20F100424                movsd xmm0, [rsp]
   183 000000F1 415E                      pop r14
   184                                  
   185                                    ; Restore GPRs
   186 000000F3 9D                        popf
   187 000000F4 415F                      pop r15
   188 000000F6 415E                      pop r14
   189 000000F8 415D                      pop r13
   190 000000FA 415C                      pop r12
   191 000000FC 415B                      pop r11
   192 000000FE 415A                      pop r10
   193 00000100 4159                      pop r9
   194 00000102 4158                      pop r8
   195 00000104 5F                        pop rdi
   196 00000105 5E                        pop rsi
   197 00000106 5A                        pop rdx
   198 00000107 59                        pop rcx
   199 00000108 5B                        pop rbx
   200 00000109 5D                        pop rbp
   201                                  
   202 0000010A C3                        ret
