     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  segment .data
    12                                  ; Constants
    13 00000000 20202020506C656173-     initial_msg db "    Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 6520656E7465722074-
    13 00000012 686520737065656420-
    13 0000001B 666F72207468652069-
    13 00000024 6E697469616C207365-
    13 0000002D 676D656E74206F6620-
    13 00000036 746865207472697020-
    13 0000003F 286D7068293A2000   
    14                                  initial_msg_len equ $-initial_msg
    15                                  
    16 00000047 20202020466F722068-     miles_msg db "    For how many miles will you maintain this average speed: ", 0
    16 00000050 6F77206D616E79206D-
    16 00000059 696C65732077696C6C-
    16 00000062 20796F75206D61696E-
    16 0000006B 7461696E2074686973-
    16 00000074 206176657261676520-
    16 0000007D 73706565643A2000   
    17                                  miles_msg_len equ $-miles_msg
    18                                  
    19 00000085 202020205768617420-     final_seg_msg db "    What will be your speed during the final segment of the trip (mph): ", 0
    19 0000008E 77696C6C2062652079-
    19 00000097 6F7572207370656564-
    19 000000A0 20647572696E672074-
    19 000000A9 68652066696E616C20-
    19 000000B2 7365676D656E74206F-
    19 000000BB 662074686520747269-
    19 000000C4 7020286D7068293A20-
    19 000000CD 00                 
    20                                  final_seg_msg_len equ $-final_seg_msg
    21                                  
    22 000000CE 20202020596F757220-     avg_speed_msg db "    Your average speed will be %1.5lf mph.", 10, 0
    22 000000D7 617665726167652073-
    22 000000E0 706565642077696C6C-
    22 000000E9 2062652025312E356C-
    22 000000F2 66206D70682E0A00   
    23                                  avg_speed_msg_len equ $-avg_speed_msg
    24                                  
    25 000000FA 202020205468652074-     total_msg db "    The total travel time will be %1.2lf hours.", 10, 0
    25 00000103 6F74616C2074726176-
    25 0000010C 656C2074696D652077-
    25 00000115 696C6C206265202531-
    25 0000011E 2E326C6620686F7572-
    25 00000127 732E0A00           
    26                                  total_msg_len equ $-total_msg
    27                                  
    28 0000012B 20202020496E76616C-     invalid_msg db "    Invalid number. Try again.", 10, 0
    28 00000134 6964206E756D626572-
    28 0000013D 2E2054727920616761-
    28 00000146 696E2E0A00         
    29                                  invalid_msg_len equ $-invalid_msg
    30                                  
    31 0000014B 202020204465627567-     debug db "    Debug: %1.2lf", 10, 10, 0
    31 00000154 3A2025312E326C660A-
    31 0000015D 0A00               
    32                                  debug_len equ $-debug
    33                                  
    34 0000015F 256C6600                floatform db "%lf", 0
    35 00000163 257300                  stringform db "%s", 0
    36 00000166 0000000000B06F40        hotel_distance dq 253.5
    37                                  
    38                                  segment .bss
    39                                  align 64
    40 00000000 <res 00000340>          backuparea resb 832
    41                                  
    42 00000340 <res 00000008>          distance: resq 1
    43                                  
    44 00000348 <res 00000008>          first_speed: resq 1
    45 00000350 <res 00000008>          first_leg: resq 1
    46 00000358 <res 00000008>          first_time: resq 1
    47                                  
    48 00000360 <res 00000008>          second_speed: resq 1
    49 00000368 <res 00000008>          second_leg: resq 1
    50 00000370 <res 00000008>          second_time: resq 1
    51                                  
    52 00000378 <res 00000008>          avg_speed: resq 1
    53 00000380 <res 00000008>          total_time: resq 1
    54                                  
    55                                  segment .text
    56                                  las_vegas:                ; start here
    57                                  
    58                                  ; ============= Backup GPRs ============================
    59 00000000 55                      push rbp
    60 00000001 4889E5                  mov rbp, rsp
    61 00000004 53                      push rbx
    62 00000005 51                      push rcx
    63 00000006 52                      push rdx
    64 00000007 56                      push rsi
    65 00000008 57                      push rdi
    66 00000009 4150                    push r8
    67 0000000B 4151                    push r9
    68 0000000D 4152                    push r10
    69 0000000F 4153                    push r11
    70 00000011 4154                    push r12
    71 00000013 4155                    push r13
    72 00000015 4156                    push r14
    73 00000017 4157                    push r15
    74 00000019 9C                      pushf
    75                                  
    76                                  ; =============== First speed ================================
    77                                  
    78                                  ; Prompt for input of initial distance
    79                                  ; push qword 0
    80 0000001A B800000000              mov rax, 0
    81 0000001F 48BF-                   mov rdi, stringform       ; "%s"
    81 00000021 [6301000000000000] 
    82 00000029 48BE-                   mov rsi, initial_msg
    82 0000002B [0000000000000000] 
    83 00000033 E8(00000000)            call printf
    84                                  
    85                                  ; Get initial from user
    86                                  ; push qword 0
    87 00000038 B800000000              mov rax, 0
    88 0000003D 48BF-                   mov rdi, floatform        ; "%lf"
    88 0000003F [5F01000000000000] 
    89 00000047 4889E6                  mov rsi, rsp
    90 0000004A E8(00000000)            call scanf
    91 0000004F F2440F100424            movsd xmm8, [rsp]         ; initial speed input in xmm8 now
    92                                  ; movsd qword [first_speed], xmm8
    93                                  ; pop rax
    94                                  
    95                                  ; Print initial from user
    96                                  ; push qword 0
    97 00000055 B801000000              mov rax, 1
    98 0000005A 48BF-                   mov rdi, debug
    98 0000005C [4B01000000000000] 
    99 00000064 E8(00000000)            call printf
   100                                  ; End of block
   101                                  
   102                                  ; =============== First leg ===================================
   103                                  
   104                                  ; Prompt for input of miles maintained
   105                                  ; push qword 0
   106 00000069 B800000000              mov rax, 0
   107 0000006E 48BF-                   mov rdi, stringform       ; "%s"
   107 00000070 [6301000000000000] 
   108 00000078 48BE-                   mov rsi, miles_msg
   108 0000007A [4700000000000000] 
   109 00000082 E8(00000000)            call printf
   110                                  
   111                                  ; Get miles from user
   112                                  ; push qword 0
   113 00000087 B800000000              mov rax, 0
   114 0000008C 48BF-                   mov rdi, floatform
   114 0000008E [5F01000000000000] 
   115 00000096 4889E6                  mov rsi, rsp
   116 00000099 E8(00000000)            call scanf
   117 0000009E F2440F100C24            movsd xmm9, [rsp]         ; miles input in xmm9 now
   118                                  ; movsd qword [first_leg], xmm9
   119                                  ; pop rax
   120                                  
   121                                  ; Print miles from user
   122                                  ; push qword 0
   123 000000A4 B801000000              mov rax, 1
   124 000000A9 48BF-                   mov rdi, debug
   124 000000AB [4B01000000000000] 
   125 000000B3 E8(00000000)            call printf
   126                                  ; End of block
   127                                  
   128                                  ; ================= Second speed =============================
   129                                  
   130                                  ; Prompt for input of final speed
   131                                  ; push qword 0
   132 000000B8 B800000000              mov rax, 0
   133 000000BD 48BF-                   mov rdi, stringform       ; "%s"
   133 000000BF [6301000000000000] 
   134 000000C7 48BE-                   mov rsi, final_seg_msg
   134 000000C9 [8500000000000000] 
   135 000000D1 E8(00000000)            call printf
   136                                  
   137                                  ; Get final_seg from user
   138                                  ; push qword 0
   139 000000D6 B800000000              mov rax, 0
   140 000000DB 48BF-                   mov rdi, floatform
   140 000000DD [5F01000000000000] 
   141 000000E5 4889E6                  mov rsi, rsp
   142 000000E8 E8(00000000)            call scanf
   143 000000ED F2440F101424            movsd xmm10, [rsp]        ; final_seg input in xmm10 now
   144                                  ; movsd qword [second_speed], xmm10
   145                                  ; pop rax
   146                                  
   147                                  ; Print final_seg from user
   148                                  ; push qword 0
   149 000000F3 B801000000              mov rax, 1
   150 000000F8 48BF-                   mov rdi, debug
   150 000000FA [4B01000000000000] 
   151 00000102 E8(00000000)            call printf
   152                                  ; pop rax
   153                                  ; End of block
   154                                  
   155                                  ; ================= First leg / first speed ==================
   156                                  ; xmm8 = initial (first speed)
   157                                  ; xmm9 = miles (first leg)
   158 00000107 F2450F10D9              movsd xmm11, xmm9
   159 0000010C F2450F5ED8              divsd xmm11, xmm8
   160 00000111 F2450F10E3              movsd xmm12, xmm11
   161                                  ; movsd xmm11, qword [first_leg]          ; move first_speed (xmm8) into xmm11
   162                                  ; divsd xmm11, qword [first_speed]        ; xmm11 = xmm11 / first_speed
   163                                  ; movsd qword [first_time], xmm11         ; move xmm11 into first_time
   164                                  
   165                                  ; ================= Second leg = 253.5 - first leg ===========
   166 00000116 F2440F101C25-           movsd xmm11, qword [hotel_distance] ; xmm11 = 253.5
   166 0000011C [66010000]         
   167 00000120 F2450F10FB              movsd xmm15, xmm11       ; copy xmm11 into xmm15, xmm15 = 253.5
   168 00000125 F2450F5CD9              subsd xmm11, xmm9        ; xmm11 = xmm11 - xmm9 (second leg = 253.5 - first leg)
   169                                  
   170                                  ; ============= Second leg / second speed =======================
   171                                  ; xmm10 = second speed
   172                                  ; xmm14 = second leg
   173 0000012A F2450F5EDA              divsd xmm11, xmm10        ; xmm11 = xmm11 / xmm10
   174                                  ; movsd qword [second_time], xmm11
   175                                  
   176                                  ; ============= Total travel time ===============================
   177                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   178                                  ; movsd xmm11, qword [second_time]
   179 0000012F F2450F58DC              addsd xmm11, xmm12
   180                                  ; addsd xmm9, xmm14         ; total travel time
   181                                  ; movsd xmm13, xmm9         ; copy total travel time into xmm13
   182                                  
   183                                  ; ============= Average speed ===================================
   184                                  ; average speed = 253.5 / total travel time
   185 00000134 F2450F5EFB              divsd xmm15, xmm11 ; xmm15 = xmm15 / xmm11 (average speed = 253.5 / total travel time)
   186                                  
   187                                  ; ============= Output avg_speed_msg ============================
   188                                  ; movsd xmm15, [rsp] ; move average speed to top of stack
   189                                  ; push qword 0
   190 00000139 B801000000              mov rax, 1
   191 0000013E F2410F10C7              movsd xmm0, xmm15
   192 00000143 F20F100424              movsd xmm0, [rsp]
   193 00000148 48BF-                   mov rdi, avg_speed_msg
   193 0000014A [CE00000000000000] 
   194 00000152 E8(00000000)            call printf
   195                                  ; mov qword rax, 0
   196                                  ; pop rax
   197                                  
   198                                  ; ============= Output total travel time ========================
   199                                  ; movsd xmm0, xmm11        ; move total travel time to top of stack
   200                                  ; push qword 0
   201 00000157 B801000000              mov rax, 1
   202 0000015C F2410F10C3              movsd xmm0, xmm11
   203 00000161 F20F100424              movsd xmm0, [rsp]
   204 00000166 48BF-                   mov rdi, total_msg
   204 00000168 [FA00000000000000] 
   205 00000170 E8(00000000)            call printf
   206                                  ; mov qword rax, 0
   207                                  ; pop rax
   208                                  ; End of block
   209                                  
   210                                  ; ============= Calculate average speed =========================
   211                                  ; hotel_distance = 253.5
   212                                  ; xmm8 = initial (first speed) DONE
   213                                  ; xmm9 = miles (first leg) DONE
   214                                  ; xmm10 = final_seg (second leg) DONE
   215                                  ; second_leg = 253.5 - first leg DONE
   216                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   217                                  ; average speed = 253.5 / total travel time
   218                                  
   219                                  ; Set return value
   220                                  ; setreturnvalue:
   221                                  ; push r14
   222 00000175 F20F100424              movsd xmm0, [rsp]
   223                                  ; pop r14
   224                                  
   225                                  ; =============== Restore GPRs ==========================
   226 0000017A 9D                      popf
   227 0000017B 415F                    pop r15
   228 0000017D 415E                    pop r14
   229 0000017F 415D                    pop r13
   230 00000181 415C                    pop r12
   231 00000183 415B                    pop r11
   232 00000185 415A                    pop r10
   233 00000187 4159                    pop r9
   234 00000189 4158                    pop r8
   235 0000018B 5F                      pop rdi
   236 0000018C 5E                      pop rsi
   237 0000018D 5A                      pop rdx
   238 0000018E 59                      pop rcx
   239 0000018F 5B                      pop rbx
   240 00000190 5D                      pop rbp
   241                                  
   242 00000191 C3                      ret
