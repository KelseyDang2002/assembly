     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  segment .data
    12                                  ; Constants
    13 00000000 20202020506C656173-     initial_msg db "    Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 6520656E7465722074-
    13 00000012 686520737065656420-
    13 0000001B 666F72207468652069-
    13 00000024 6E697469616C207365-
    13 0000002D 676D656E74206F6620-
    13 00000036 746865207472697020-
    13 0000003F 286D7068293A2000   
    14                                  initial_msg_len equ $-initial_msg
    15                                  
    16 00000047 20202020466F722068-     miles_msg db "    For how many miles will you maintain this average speed: ", 0
    16 00000050 6F77206D616E79206D-
    16 00000059 696C65732077696C6C-
    16 00000062 20796F75206D61696E-
    16 0000006B 7461696E2074686973-
    16 00000074 206176657261676520-
    16 0000007D 73706565643A2000   
    17                                  miles_msg_len equ $-miles_msg
    18                                  
    19 00000085 202020205768617420-     final_seg_msg db "    What will be your speed during the final segment of the trip (mph): ", 0
    19 0000008E 77696C6C2062652079-
    19 00000097 6F7572207370656564-
    19 000000A0 20647572696E672074-
    19 000000A9 68652066696E616C20-
    19 000000B2 7365676D656E74206F-
    19 000000BB 662074686520747269-
    19 000000C4 7020286D7068293A20-
    19 000000CD 00                 
    20                                  final_seg_msg_len equ $-final_seg_msg
    21                                  
    22 000000CE 20202020596F757220-     avg_speed_msg db "    Your average speed will be %1.5lf mph.", 10, 0
    22 000000D7 617665726167652073-
    22 000000E0 706565642077696C6C-
    22 000000E9 2062652025312E356C-
    22 000000F2 66206D70682E0A00   
    23                                  avg_speed_msg_len equ $-avg_speed_msg
    24                                  
    25 000000FA 202020205468652074-     total_msg db "    The total travel time will be %1.2lf hours.", 10, 0
    25 00000103 6F74616C2074726176-
    25 0000010C 656C2074696D652077-
    25 00000115 696C6C206265202531-
    25 0000011E 2E326C6620686F7572-
    25 00000127 732E0A00           
    26                                  total_msg_len equ $-total_msg
    27                                  
    28 0000012B 20202020496E76616C-     invalid_msg db "    Invalid number. Try again.", 10, 0
    28 00000134 6964206E756D626572-
    28 0000013D 2E2054727920616761-
    28 00000146 696E2E0A00         
    29                                  invalid_msg_len equ $-invalid_msg
    30                                  
    31 0000014B 202020204465627567-     debug db "    Debug: %1.2lf", 10, 10, 0
    31 00000154 3A2025312E326C660A-
    31 0000015D 0A00               
    32                                  debug_len equ $-debug
    33                                  
    34 0000015F 256C6600                floatform db "%lf", 0
    35 00000163 257300                  stringform db "%s", 0
    36 00000166 0000000000B06F40        hotel_distance dq 253.5
    37                                  
    38                                  segment .bss
    39                                  align 64
    40 00000000 <res 00000340>          backuparea resb 832
    41                                  
    42                                  segment .text
    43                                  las_vegas:                ; start here
    44                                  
    45                                  ; ============= Backup GPRs ============================
    46 00000000 55                      push rbp
    47 00000001 4889E5                  mov rbp, rsp
    48 00000004 53                      push rbx
    49 00000005 51                      push rcx
    50 00000006 52                      push rdx
    51 00000007 56                      push rsi
    52 00000008 57                      push rdi
    53 00000009 4150                    push r8
    54 0000000B 4151                    push r9
    55 0000000D 4152                    push r10
    56 0000000F 4153                    push r11
    57 00000011 4154                    push r12
    58 00000013 4155                    push r13
    59 00000015 4156                    push r14
    60 00000017 4157                    push r15
    61 00000019 9C                      pushf
    62                                  
    63                                  ; =============== First speed ================================
    64                                  
    65                                  ; Prompt for input of initial distance
    66 0000001A 6A00                    push qword 0
    67 0000001C B800000000              mov qword rax, 0
    68 00000021 48BF-                   mov rdi, stringform       ; "%s"
    68 00000023 [6301000000000000] 
    69 0000002B 48BE-                   mov rsi, initial_msg
    69 0000002D [0000000000000000] 
    70 00000035 E8(00000000)            call printf
    71                                  
    72                                  ; Get initial from user
    73 0000003A 6A00                    push qword 0
    74 0000003C B800000000              mov qword rax, 0
    75 00000041 48BF-                   mov rdi, floatform        ; "%lf"
    75 00000043 [5F01000000000000] 
    76 0000004B 4889E6                  mov rsi, rsp
    77 0000004E E8(00000000)            call scanf
    78 00000053 F2440F100424            movsd xmm8, [rsp]         ; initial speed input in xmm8 now
    79 00000059 58                      pop rax
    80                                  
    81                                  ; Print initial from user
    82 0000005A 6A00                    push qword 0
    83 0000005C B801000000              mov rax, 1
    84 00000061 48BF-                   mov rdi, debug
    84 00000063 [4B01000000000000] 
    85 0000006B E8(00000000)            call printf
    86                                  ; End of block
    87                                  
    88                                  ; =============== First leg ===================================
    89                                  
    90                                  ; Prompt for input of miles maintained
    91 00000070 6A00                    push qword 0
    92 00000072 B800000000              mov qword rax, 0
    93 00000077 48BF-                   mov rdi, stringform       ; "%s"
    93 00000079 [6301000000000000] 
    94 00000081 48BE-                   mov rsi, miles_msg
    94 00000083 [4700000000000000] 
    95 0000008B E8(00000000)            call printf
    96                                  
    97                                  ; Get miles from user
    98 00000090 6A00                    push qword 0
    99 00000092 B800000000              mov qword rax, 0
   100 00000097 48BF-                   mov rdi, floatform
   100 00000099 [5F01000000000000] 
   101 000000A1 4889E6                  mov rsi, rsp
   102 000000A4 E8(00000000)            call scanf
   103 000000A9 F2440F100C24            movsd xmm9, [rsp]         ; miles input in xmm9 now
   104 000000AF 58                      pop rax
   105                                  
   106                                  ; Print miles from user
   107 000000B0 6A00                    push qword 0
   108 000000B2 B801000000              mov rax, 1
   109 000000B7 48BF-                   mov rdi, debug
   109 000000B9 [4B01000000000000] 
   110 000000C1 E8(00000000)            call printf
   111                                  ; End of block
   112                                  
   113                                  ; ================= Second speed =============================
   114                                  
   115                                  ; Prompt for input of final speed
   116 000000C6 6A00                    push qword 0
   117 000000C8 B800000000              mov qword rax, 0
   118 000000CD 48BF-                   mov rdi, stringform       ; "%s"
   118 000000CF [6301000000000000] 
   119 000000D7 48BE-                   mov rsi, final_seg_msg
   119 000000D9 [8500000000000000] 
   120 000000E1 E8(00000000)            call printf
   121                                  
   122                                  ; Get final_seg from user
   123 000000E6 6A00                    push qword 0
   124 000000E8 B800000000              mov qword rax, 0
   125 000000ED 48BF-                   mov rdi, floatform
   125 000000EF [5F01000000000000] 
   126 000000F7 4889E6                  mov rsi, rsp
   127 000000FA E8(00000000)            call scanf
   128 000000FF F2440F101424            movsd xmm10, [rsp]        ; final_seg input in xmm10 now
   129 00000105 58                      pop rax
   130                                  
   131                                  ; Print final_seg from user
   132 00000106 6A00                    push qword 0
   133 00000108 B801000000              mov rax, 1
   134 0000010D 48BF-                   mov rdi, debug
   134 0000010F [4B01000000000000] 
   135 00000117 E8(00000000)            call printf
   136 0000011C 58                      pop rax
   137                                  ; End of block
   138                                  
   139                                  ; ================= First leg / first speed ==================
   140                                  ; xmm8 = initial (first speed)
   141                                  ; xmm9 = miles (first leg)
   142                                  ; movsd xmm11, xmm9         ; copy xmm9 into xmm11, xmm11 = first leg
   143                                  ; movsd xmm8, [rsp]
   144                                  ; divsd xmm11, [rsp]        ; xmm11 = xmm11 / xmm8
   145                                  
   146                                  ; ================= Second leg = 253.5 - first leg ===========
   147                                  ; movsd xmm14, qword [hotel_distance] ; xmm14 = 253.5
   148                                  ; movsd xmm15, xmm14        ; copy xmm14 into xmm15, xmm15 = 253.5
   149                                  ; subsd xmm14, xmm11        ; xmm14 = xmm14 - xmm11 (second leg = 253.5 - first leg)
   150                                  
   151                                  ; ============= Second leg / second speed =======================
   152                                  ; xmm10 = second speed
   153                                  ; xmm14 = second leg
   154                                  ; divsd xmm14, xmm10        ; xmm14 = xmm14 / xmm10
   155                                  
   156                                  ; ============= Total travel time ===============================
   157                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   158                                  ; addsd xmm9, xmm14         ; total travel time
   159                                  ; movsd xmm13, xmm9         ; copy total travel time into xmm13
   160                                  
   161                                  ; ============= Average speed ===================================
   162                                  ; average speed = 253.5 / total travel time
   163                                  ; divsd xmm15, xmm9 ; xmm15 = xmm15 / xmm9 (average speed = 253.5 / total travel time)
   164                                  
   165                                  ; ============= Output avg_speed_msg ============================
   166                                  ; movsd xmm15, [rsp] ; move average speed to top of stack
   167 0000011D 6A00                    push qword 0
   168 0000011F B801000000              mov rax, 1
   169 00000124 48BF-                   mov rdi, avg_speed_msg
   169 00000126 [CE00000000000000] 
   170 0000012E E8(00000000)            call printf
   171 00000133 58                      pop rax
   172                                  
   173                                  ; ============= Output total travel time ========================
   174                                  ; movsd xmm13, [rsp]        ; move total travel time to top of stack
   175 00000134 6A00                    push qword 0
   176 00000136 B801000000              mov rax, 1
   177 0000013B 48BF-                   mov rdi, total_msg
   177 0000013D [FA00000000000000] 
   178 00000145 E8(00000000)            call printf
   179 0000014A 58                      pop rax
   180                                  ; End of block
   181                                  
   182                                  ; ============= Calculate average speed =========================
   183                                  ; hotel_distance = 253.5
   184                                  ; xmm8 = initial (first speed) DONE
   185                                  ; xmm9 = miles (first leg) DONE
   186                                  ; xmm10 = final_seg (second leg) DONE
   187                                  ; second_leg = 253.5 - first leg DONE
   188                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   189                                  ; average speed = 253.5 / total travel time
   190                                  
   191                                  ; Set return value
   192                                  setreturnvalue:
   193 0000014B 4156                    push r14
   194 0000014D F20F100424              movsd xmm0, [rsp]
   195 00000152 415E                    pop r14
   196                                  
   197                                  ; =============== Restore GPRs ==========================
   198 00000154 9D                      popf
   199 00000155 415F                    pop r15
   200 00000157 415E                    pop r14
   201 00000159 415D                    pop r13
   202 0000015B 415C                    pop r12
   203 0000015D 415B                    pop r11
   204 0000015F 415A                    pop r10
   205 00000161 4159                    pop r9
   206 00000163 4158                    pop r8
   207 00000165 5F                      pop rdi
   208 00000166 5E                      pop rsi
   209 00000167 5A                      pop rdx
   210 00000168 59                      pop rcx
   211 00000169 5B                      pop rbx
   212 0000016A 5D                      pop rbp
   213                                  
   214 0000016B C3                      ret
