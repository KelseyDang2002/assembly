     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  segment .data
    12                                  ; Constants
    13 00000000 20202020506C656173-     initial_msg db "    Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 6520656E7465722074-
    13 00000012 686520737065656420-
    13 0000001B 666F72207468652069-
    13 00000024 6E697469616C207365-
    13 0000002D 676D656E74206F6620-
    13 00000036 746865207472697020-
    13 0000003F 286D7068293A2000   
    14                                  initial_msg_len equ $-initial_msg
    15                                  
    16 00000047 20202020466F722068-     miles_msg db "    For how many miles will you maintain this average speed: ", 0
    16 00000050 6F77206D616E79206D-
    16 00000059 696C65732077696C6C-
    16 00000062 20796F75206D61696E-
    16 0000006B 7461696E2074686973-
    16 00000074 206176657261676520-
    16 0000007D 73706565643A2000   
    17                                  miles_msg_len equ $-miles_msg
    18                                  
    19 00000085 202020205768617420-     final_seg_msg db "    What will be your speed during the final segment of the trip (mph): ", 0
    19 0000008E 77696C6C2062652079-
    19 00000097 6F7572207370656564-
    19 000000A0 20647572696E672074-
    19 000000A9 68652066696E616C20-
    19 000000B2 7365676D656E74206F-
    19 000000BB 662074686520747269-
    19 000000C4 7020286D7068293A20-
    19 000000CD 00                 
    20                                  final_seg_msg_len equ $-final_seg_msg
    21                                  
    22 000000CE 20202020596F757220-     avg_speed_msg db "    Your average speed will be %1.5lf mph.", 10, 0
    22 000000D7 617665726167652073-
    22 000000E0 706565642077696C6C-
    22 000000E9 2062652025312E356C-
    22 000000F2 66206D70682E0A00   
    23                                  avg_speed_msg_len equ $-avg_speed_msg
    24                                  
    25 000000FA 202020205468652074-     total_msg db "    The total travel time will be %1.2lf hours.", 10, 0
    25 00000103 6F74616C2074726176-
    25 0000010C 656C2074696D652077-
    25 00000115 696C6C206265202531-
    25 0000011E 2E326C6620686F7572-
    25 00000127 732E0A00           
    26                                  total_msg_len equ $-total_msg
    27                                  
    28 0000012B 20202020496E76616C-     invalid_msg db "    Invalid number. Try again.", 10, 0
    28 00000134 6964206E756D626572-
    28 0000013D 2E2054727920616761-
    28 00000146 696E2E0A00         
    29                                  invalid_msg_len equ $-invalid_msg
    30                                  
    31 0000014B 202020204465627567-     debug db "    Debug: %1.2lf", 10, 10, 0
    31 00000154 3A2025312E326C660A-
    31 0000015D 0A00               
    32                                  debug_len equ $-debug
    33                                  
    34 0000015F 256C6600                floatform db "%lf", 0
    35 00000163 257300                  stringform db "%s", 0
    36 00000166 0000000000B06F40        hotel_distance dq 253.5
    37 0000016E 000000000000F0BF        wrong dq -1.0
    38                                  
    39                                  segment .bss
    40                                  align 64
    41 00000000 <res 00000340>          backuparea resb 832
    42                                  
    43                                  segment .text
    44                                  las_vegas:                ; start here
    45                                  
    46                                  ; ============= Backup GPRs ============================
    47 00000000 55                      push rbp
    48 00000001 4889E5                  mov rbp, rsp
    49 00000004 53                      push rbx
    50 00000005 51                      push rcx
    51 00000006 52                      push rdx
    52 00000007 56                      push rsi
    53 00000008 57                      push rdi
    54 00000009 4150                    push r8
    55 0000000B 4151                    push r9
    56 0000000D 4152                    push r10
    57 0000000F 4153                    push r11
    58 00000011 4154                    push r12
    59 00000013 4155                    push r13
    60 00000015 4156                    push r14
    61 00000017 4157                    push r15
    62 00000019 9C                      pushf
    63                                  
    64                                  ; =============== First speed ================================
    65                                  
    66                                  ; Prompt for input of initial distance
    67 0000001A B800000000              mov rax, 0
    68 0000001F 48BF-                   mov rdi, stringform       ; "%s"
    68 00000021 [6301000000000000] 
    69 00000029 48BE-                   mov rsi, initial_msg
    69 0000002B [0000000000000000] 
    70 00000033 E8(00000000)            call printf
    71                                  
    72                                  ; Get initial from user
    73 00000038 B800000000              mov rax, 0
    74 0000003D 48BF-                   mov rdi, floatform        ; "%lf"
    74 0000003F [5F01000000000000] 
    75 00000047 4889E6                  mov rsi, rsp
    76 0000004A E8(00000000)            call scanf
    77 0000004F F2440F100424            movsd xmm8, [rsp]
    78                                  
    79                                  ; Check for invaild input
    80                                  ; xorpd xmm9, xmm9
    81                                  ; ucomisd xmm8, xmm9
    82                                  ; jb invalid_input
    83                                  ; jmp first_leg
    84                                  ;
    85                                  ; invalid_input:
    86                                  ; mov rax, 0
    87                                  ; mov rdi, stringform
    88                                  ; mov rsi, invalid_msg
    89                                  ; call printf
    90                                  ; movsd xmm0, [wrong]
    91                                  ; jmp done
    92                                  ; End of block
    93                                  
    94                                  ; =============== First leg ===================================
    95                                  
    96                                  first_leg:
    97                                  ; Prompt for input of miles maintained
    98 00000055 B800000000              mov rax, 0
    99 0000005A 48BF-                   mov rdi, stringform       ; "%s"
    99 0000005C [6301000000000000] 
   100 00000064 48BE-                   mov rsi, miles_msg
   100 00000066 [4700000000000000] 
   101 0000006E E8(00000000)            call printf
   102                                  
   103                                  ; Get miles from user
   104 00000073 B800000000              mov rax, 0
   105 00000078 48BF-                   mov rdi, floatform
   105 0000007A [5F01000000000000] 
   106 00000082 4889E6                  mov rsi, rsp
   107 00000085 E8(00000000)            call scanf
   108 0000008A F2440F101424            movsd xmm10, [rsp]
   109                                  
   110                                  ; Check for invaild input
   111                                  ; xorpd xmm9, xmm9
   112                                  ; ucomisd xmm10, xmm9
   113                                  ; jb invalid_input2
   114                                  ; jmp second_speed
   115                                  ;
   116                                  ; invalid_input2:
   117                                  ; mov rax, 0
   118                                  ; mov rdi, stringform
   119                                  ; mov rsi, invalid_msg
   120                                  ; call printf
   121                                  ; movsd xmm0, [wrong]
   122                                  ; jmp done
   123                                  ; End of block
   124                                  
   125                                  ; ================= Second speed =============================
   126                                  
   127                                  second_speed:
   128                                  ; Prompt for input of final speed
   129 00000090 B800000000              mov rax, 0
   130 00000095 48BF-                   mov rdi, stringform       ; "%s"
   130 00000097 [6301000000000000] 
   131 0000009F 48BE-                   mov rsi, final_seg_msg
   131 000000A1 [8500000000000000] 
   132 000000A9 E8(00000000)            call printf
   133                                  
   134                                  ; Get final_seg from user
   135 000000AE B800000000              mov rax, 0
   136 000000B3 48BF-                   mov rdi, floatform
   136 000000B5 [5F01000000000000] 
   137 000000BD 4889E6                  mov rsi, rsp
   138 000000C0 E8(00000000)            call scanf
   139 000000C5 F2440F101C24            movsd xmm11, [rsp]
   140                                  ; End of block
   141                                  
   142                                  ; ================= Second leg = 253.5 - first leg ===========
   143                                  ; xmm8 = first_speed
   144                                  ; xmm10 = first_leg
   145                                  ; xmm11 = second_speed
   146 000000CB F2440F102425-           movsd xmm12, [hotel_distance]       ; xmm12 = 253.5
   146 000000D1 [66010000]         
   147 000000D5 F2450F5CE2              subsd xmm12, xmm10                  ; xmm12 = xmm12 - xmm10, xmm12 = second_leg
   148                                  
   149                                  ; ================= Average total speed =======================
   150                                  ; xmm8 = first_speed
   151                                  ; xmm10 = first_leg
   152                                  ; xmm11 = second_speed
   153                                  ; xmm12 = second_leg
   154 000000DA F2450F5ED0              divsd xmm10, xmm8                   ; xmm10 = first_leg / first_speed
   155 000000DF F2450F5EE3              divsd xmm12, xmm11                  ; xmm12 = second_leg / second_speed
   156 000000E4 F2450F58E2              addsd xmm12, xmm10                  ; xmm12 = xmm12 + xmm10, xmm12 = average total time
   157                                  
   158                                  ; ================= Average speed ==============================
   159                                  ; xmm10 = first_leg / first_speed
   160                                  ; xmm12 = average total time
   161 000000E9 F2440F101425-           movsd xmm10, [hotel_distance]       ; xmm10 = 253.5
   161 000000EF [66010000]         
   162 000000F3 F2450F5ED4              divsd xmm10, xmm12                  ; xmm10 = xmm10 / xmm12, xmm10 = average speed
   163                                  
   164                                  ; ============= Output avg_speed_msg ============================
   165 000000F8 F2410F10C2              movsd xmm0, xmm10
   166 000000FD B801000000              mov rax, 1
   167 00000102 48BF-                   mov rdi, avg_speed_msg
   167 00000104 [CE00000000000000] 
   168 0000010C E8(00000000)            call printf
   169                                  
   170                                  ; ============= Output total travel time ========================
   171 00000111 F2410F10C4              movsd xmm0, xmm12
   172 00000116 B801000000              mov rax, 1
   173 0000011B 48BF-                   mov rdi, total_msg
   173 0000011D [FA00000000000000] 
   174 00000125 E8(00000000)            call printf
   175                                  ; End of block
   176                                  
   177                                  ; Call to main.cpp
   178 0000012A F2410F10C4              movsd xmm0, xmm12
   179                                  
   180                                  ; =============== Restore GPRs ==========================
   181                                  done:
   182 0000012F 9D                      popf
   183 00000130 415F                    pop r15
   184 00000132 415E                    pop r14
   185 00000134 415D                    pop r13
   186 00000136 415C                    pop r12
   187 00000138 415B                    pop r11
   188 0000013A 415A                    pop r10
   189 0000013C 4159                    pop r9
   190 0000013E 4158                    pop r8
   191 00000140 5F                      pop rdi
   192 00000141 5E                      pop rsi
   193 00000142 5A                      pop rdx
   194 00000143 59                      pop rcx
   195 00000144 5B                      pop rbx
   196 00000145 5D                      pop rbp
   197                                  
   198 00000146 C3                      ret
