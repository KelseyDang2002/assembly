     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  segment .data
    12                                  ; Constants
    13 00000000 20202020506C656173-     initial_msg db "    Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 6520656E7465722074-
    13 00000012 686520737065656420-
    13 0000001B 666F72207468652069-
    13 00000024 6E697469616C207365-
    13 0000002D 676D656E74206F6620-
    13 00000036 746865207472697020-
    13 0000003F 286D7068293A2000   
    14                                  initial_msg_len equ $-initial_msg
    15                                  
    16 00000047 20202020466F722068-     miles_msg db "    For how many miles will you maintain this average speed: ", 0
    16 00000050 6F77206D616E79206D-
    16 00000059 696C65732077696C6C-
    16 00000062 20796F75206D61696E-
    16 0000006B 7461696E2074686973-
    16 00000074 206176657261676520-
    16 0000007D 73706565643A2000   
    17                                  miles_msg_len equ $-miles_msg
    18                                  
    19 00000085 202020205768617420-     final_seg_msg db "    What will be your speed during the final segment of the trip (mph): ", 0
    19 0000008E 77696C6C2062652079-
    19 00000097 6F7572207370656564-
    19 000000A0 20647572696E672074-
    19 000000A9 68652066696E616C20-
    19 000000B2 7365676D656E74206F-
    19 000000BB 662074686520747269-
    19 000000C4 7020286D7068293A20-
    19 000000CD 00                 
    20                                  final_seg_msg_len equ $-final_seg_msg
    21                                  
    22 000000CE 20202020596F757220-     avg_speed_msg db "    Your average speed will be %1.5lf mph.", 10, 0
    22 000000D7 617665726167652073-
    22 000000E0 706565642077696C6C-
    22 000000E9 2062652025312E356C-
    22 000000F2 66206D70682E0A00   
    23                                  avg_speed_msg_len equ $-avg_speed_msg
    24                                  
    25 000000FA 202020205468652074-     total_msg db "    The total travel time will be %1.2lf hours.", 10, 0
    25 00000103 6F74616C2074726176-
    25 0000010C 656C2074696D652077-
    25 00000115 696C6C206265202531-
    25 0000011E 2E326C6620686F7572-
    25 00000127 732E0A00           
    26                                  total_msg_len equ $-total_msg
    27                                  
    28 0000012B 20202020496E76616C-     invalid_msg db "    Invalid number. Try again.", 10, 0
    28 00000134 6964206E756D626572-
    28 0000013D 2E2054727920616761-
    28 00000146 696E2E0A00         
    29                                  invalid_msg_len equ $-invalid_msg
    30                                  
    31 0000014B 202020204465627567-     debug db "    Debug: %1.2lf", 10, 10, 0
    31 00000154 3A2025312E326C660A-
    31 0000015D 0A00               
    32                                  debug_len equ $-debug
    33                                  
    34 0000015F 256C6600                floatform db "%lf", 0
    35 00000163 257300                  stringform db "%s", 0
    36 00000166 0000000000B06F40        hotel_distance dq 253.5
    37                                  
    38                                  segment .bss
    39                                  align 64
    40 00000000 <res 00000340>          backuparea resb 832
    41                                  
    42                                  ; distance: resq 1
    43                                  
    44 00000340 <res 00000008>          first_speed: resq 1
    45 00000348 <res 00000008>          first_leg: resq 1
    46 00000350 <res 00000008>          first_time: resq 1
    47                                  
    48 00000358 <res 00000008>          second_speed: resq 1
    49 00000360 <res 00000008>          second_leg: resq 1
    50 00000368 <res 00000008>          second_time: resq 1
    51                                  
    52 00000370 <res 00000008>          avg_speed: resq 1
    53 00000378 <res 00000008>          total_time: resq 1
    54                                  
    55                                  segment .text
    56                                  las_vegas:                ; start here
    57                                  
    58                                  ; ============= Backup GPRs ============================
    59 00000000 55                      push rbp
    60 00000001 4889E5                  mov rbp, rsp
    61 00000004 53                      push rbx
    62 00000005 51                      push rcx
    63 00000006 52                      push rdx
    64 00000007 56                      push rsi
    65 00000008 57                      push rdi
    66 00000009 4150                    push r8
    67 0000000B 4151                    push r9
    68 0000000D 4152                    push r10
    69 0000000F 4153                    push r11
    70 00000011 4154                    push r12
    71 00000013 4155                    push r13
    72 00000015 4156                    push r14
    73 00000017 4157                    push r15
    74 00000019 9C                      pushf
    75                                  
    76                                  ; =============== First speed ================================
    77                                  
    78                                  ; Prompt for input of initial distance
    79 0000001A B800000000              mov rax, 0
    80 0000001F 48BF-                   mov rdi, stringform       ; "%s"
    80 00000021 [6301000000000000] 
    81 00000029 48BE-                   mov rsi, initial_msg
    81 0000002B [0000000000000000] 
    82 00000033 E8(00000000)            call printf
    83                                  
    84                                  ; Get initial from user
    85 00000038 B800000000              mov rax, 0
    86 0000003D 48BF-                   mov rdi, floatform        ; "%lf"
    86 0000003F [5F01000000000000] 
    87 00000047 48BE-                   mov rsi, first_speed
    87 00000049 [4003000000000000] 
    88 00000051 E8(00000000)            call scanf
    89                                  
    90                                  ; Print initial from user
    91                                  ; mov rax, 1
    92                                  ; mov rdi, debug
    93                                  ; call printf
    94                                  ; End of block
    95                                  
    96                                  ; =============== First leg ===================================
    97                                  
    98                                  ; Prompt for input of miles maintained
    99 00000056 B800000000              mov rax, 0
   100 0000005B 48BF-                   mov rdi, stringform       ; "%s"
   100 0000005D [6301000000000000] 
   101 00000065 48BE-                   mov rsi, miles_msg
   101 00000067 [4700000000000000] 
   102 0000006F E8(00000000)            call printf
   103                                  
   104                                  ; Get miles from user
   105 00000074 B800000000              mov rax, 0
   106 00000079 48BF-                   mov rdi, floatform
   106 0000007B [5F01000000000000] 
   107 00000083 48BE-                   mov rsi, first_leg
   107 00000085 [4803000000000000] 
   108 0000008D E8(00000000)            call scanf
   109                                  
   110                                  ; Print miles from user
   111                                  ; mov rax, 1
   112                                  ; mov rdi, debug
   113                                  ; call printf
   114                                  ; End of block
   115                                  
   116                                  ; ================= Second speed =============================
   117                                  
   118                                  ; Prompt for input of final speed
   119 00000092 B800000000              mov rax, 0
   120 00000097 48BF-                   mov rdi, stringform       ; "%s"
   120 00000099 [6301000000000000] 
   121 000000A1 48BE-                   mov rsi, final_seg_msg
   121 000000A3 [8500000000000000] 
   122 000000AB E8(00000000)            call printf
   123                                  
   124                                  ; Get final_seg from user
   125                                  ; push qword 0
   126 000000B0 B800000000              mov rax, 0
   127 000000B5 48BF-                   mov rdi, floatform
   127 000000B7 [5F01000000000000] 
   128 000000BF 48BE-                   mov rsi, second_speed
   128 000000C1 [5803000000000000] 
   129 000000C9 E8(00000000)            call scanf
   130                                  ; pop rax
   131                                  
   132                                  ; Print final_seg from user
   133                                  ; mov rax, 1
   134                                  ; mov rdi, debug
   135                                  ; call printf
   136                                  ; End of block
   137                                  
   138                                  ; ================= Move variables into xmm registers ==============
   139 000000CE F2440F100425-           movsd xmm8, qword [first_speed]
   139 000000D4 [40030000]         
   140 000000D8 F2440F100C25-           movsd xmm9, qword [first_leg]
   140 000000DE [48030000]         
   141 000000E2 F2440F101425-           movsd xmm10, qword [second_speed]
   141 000000E8 [58030000]         
   142                                  
   143                                  ; ================= First leg / first speed ==================
   144                                  ; xmm8 = first speed
   145                                  ; xmm9 = first leg
   146                                  ; movsd xmm11, xmm9             ; copy first_leg into xmm11
   147 000000EC F2450F5EC8              divsd xmm9, xmm8                ; xmm9 = xmm9 / xmm8
   148 000000F1 F2440F110C25-           movsd qword [first_time], xmm9  ; copy xmm9 into first_time variable for later use
   148 000000F7 [50030000]         
   149                                  
   150 000000FB B801000000              mov rax, 1
   151 00000100 48BF-                   mov rdi, debug
   151 00000102 [4B01000000000000] 
   152 0000010A E8(00000000)            call printf
   153                                  
   154                                  ; ================= Second leg = 253.5 - first leg ===========
   155 0000010F F2440F101C25-           movsd xmm11, qword [hotel_distance] ; xmm11 = 253.5
   155 00000115 [66010000]         
   156                                  ; movsd xmm15, xmm11          ; copy xmm11 into xmm15 for later use
   157 00000119 F2440F100C25-           movsd xmm9, qword [first_leg]
   157 0000011F [48030000]         
   158 00000123 F2450F5CD9              subsd xmm11, xmm9           ; xmm11 = xmm11 - xmm9 (xmm11 = second leg)
   159                                  
   160                                  ; ============= Second leg / second speed =======================
   161                                  ; xmm10 = second speed
   162                                  ; xmm11 = second leg
   163 00000128 F2450F5EDA              divsd xmm11, xmm10          ; xmm11 = xmm11 / xmm10 (second_leg / second_speed)
   164 0000012D F2440F111C25-           movsd qword [second_time], xmm11 ; copy xmm11 into second_time variable for later use
   164 00000133 [68030000]         
   165                                  
   166                                  ; ============= Total travel time ===============================
   167                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   168                                  ; total travel time = first_time + second_time
   169                                  ; xmm9 = first_time
   170                                  ; xmm11 = second_time
   171 00000137 F2450F58D9              addsd xmm11, xmm9           ; xmm11 = xmm11 + xmm9 (total travel time)
   172 0000013C F2440F111C25-           movsd qword [total_time], xmm11 ; copy xmm11 into total_time variable for output
   172 00000142 [78030000]         
   173                                  
   174                                  ; ============= Average speed ===================================
   175                                  ; average speed = 253.5 / total travel time
   176                                  ; xmm11 = total travel time
   177 00000146 F2440F102425-           movsd xmm12, qword [hotel_distance]
   177 0000014C [66010000]         
   178 00000150 F2450F5EE3              divsd xmm12, xmm11          ; xmm12 = xmm12 / xmm11 (average speed)
   179 00000155 F2440F112425-           movsd qword [avg_speed], xmm12 ; copy xmm12 into avg_speed variable for output
   179 0000015B [70030000]         
   180                                  
   181                                  ; ============= Output avg_speed_msg ============================
   182 0000015F B801000000              mov rax, 1
   183 00000164 48BF-                   mov rdi, avg_speed_msg
   183 00000166 [CE00000000000000] 
   184 0000016E F20F100C25-             movsd xmm1, qword [avg_speed]
   184 00000173 [70030000]         
   185 00000177 E8(00000000)            call printf
   186                                  
   187                                  ; ============= Output total travel time ========================
   188                                  ; push qword 0
   189 0000017C B801000000              mov rax, 1
   190 00000181 48BF-                   mov rdi, total_msg
   190 00000183 [FA00000000000000] 
   191 0000018B F20F100424              movsd xmm0, [rsp]
   192 00000190 F20F100425-             movsd xmm0, qword [total_time]
   192 00000195 [78030000]         
   193 00000199 E8(00000000)            call printf
   194                                  ; End of block
   195                                  
   196                                  ; Set return value
   197                                  ; movsd xmm0, [rsp]
   198                                  
   199                                  ; =============== Restore GPRs ==========================
   200 0000019E 9D                      popf
   201 0000019F 415F                    pop r15
   202 000001A1 415E                    pop r14
   203 000001A3 415D                    pop r13
   204 000001A5 415C                    pop r12
   205 000001A7 415B                    pop r11
   206 000001A9 415A                    pop r10
   207 000001AB 4159                    pop r9
   208 000001AD 4158                    pop r8
   209 000001AF 5F                      pop rdi
   210 000001B0 5E                      pop rsi
   211 000001B1 5A                      pop rdx
   212 000001B2 59                      pop rcx
   213 000001B3 5B                      pop rbx
   214 000001B4 5D                      pop rbp
   215                                  
   216 000001B5 C3                      ret
