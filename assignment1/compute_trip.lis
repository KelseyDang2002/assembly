     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  segment .data
    12                                  ; Constants
    13 00000000 20202020506C656173-     initial_msg db "    Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 6520656E7465722074-
    13 00000012 686520737065656420-
    13 0000001B 666F72207468652069-
    13 00000024 6E697469616C207365-
    13 0000002D 676D656E74206F6620-
    13 00000036 746865207472697020-
    13 0000003F 286D7068293A2000   
    14                                  initial_msg_len equ $-initial_msg
    15                                  
    16 00000047 20202020466F722068-     miles_msg db "    For how many miles will you maintain this average speed: ", 0
    16 00000050 6F77206D616E79206D-
    16 00000059 696C65732077696C6C-
    16 00000062 20796F75206D61696E-
    16 0000006B 7461696E2074686973-
    16 00000074 206176657261676520-
    16 0000007D 73706565643A2000   
    17                                  miles_msg_len equ $-miles_msg
    18                                  
    19 00000085 202020205768617420-     final_seg_msg db "    What will be your speed during the final segment of the trip (mph): ", 0
    19 0000008E 77696C6C2062652079-
    19 00000097 6F7572207370656564-
    19 000000A0 20647572696E672074-
    19 000000A9 68652066696E616C20-
    19 000000B2 7365676D656E74206F-
    19 000000BB 662074686520747269-
    19 000000C4 7020286D7068293A20-
    19 000000CD 00                 
    20                                  final_seg_msg_len equ $-final_seg_msg
    21                                  
    22 000000CE 20202020596F757220-     avg_speed_msg db "    Your average speed will be %1.5lf mph.", 10, 0
    22 000000D7 617665726167652073-
    22 000000E0 706565642077696C6C-
    22 000000E9 2062652025312E356C-
    22 000000F2 66206D70682E0A00   
    23                                  avg_speed_msg_len equ $-avg_speed_msg
    24                                  
    25 000000FA 202020205468652074-     total_msg db "    The total travel time will be %1.2lf hours.", 10, 0
    25 00000103 6F74616C2074726176-
    25 0000010C 656C2074696D652077-
    25 00000115 696C6C206265202531-
    25 0000011E 2E326C6620686F7572-
    25 00000127 732E0A00           
    26                                  total_msg_len equ $-total_msg
    27                                  
    28 0000012B 20202020496E76616C-     invalid_msg db "    Invalid number. Try again.", 10, 0
    28 00000134 6964206E756D626572-
    28 0000013D 2E2054727920616761-
    28 00000146 696E2E0A00         
    29                                  invalid_msg_len equ $-invalid_msg
    30                                  
    31 0000014B 202020204465627567-     debug db "    Debug: %1.2lf", 10, 10, 0
    31 00000154 3A2025312E326C660A-
    31 0000015D 0A00               
    32                                  debug_len equ $-debug
    33                                  
    34 0000015F 256C6600                floatform db "%lf", 0
    35 00000163 257300                  stringform db "%s", 0
    36 00000166 0000000000B06F40        hotel_distance dq 253.5
    37                                  
    38                                  segment .bss
    39                                  align 64
    40 00000000 <res 00000340>          backuparea resb 832
    41                                  
    42                                  ; distance: resq 1
    43                                  ;
    44                                  ; first_speed: resq 1
    45                                  ; first_leg: resq 1
    46                                  ; first_time: resq 1
    47                                  ;
    48                                  ; second_speed: resq 1
    49                                  ; second_leg: resq 1
    50                                  ; second_time: resq 1
    51                                  ;
    52                                  ; avg_speed: resq 1
    53                                  ; total_time: resq 1
    54                                  
    55                                  segment .text
    56                                  las_vegas:                ; start here
    57                                  
    58                                  ; ============= Backup GPRs ============================
    59 00000000 55                      push rbp
    60 00000001 4889E5                  mov rbp, rsp
    61 00000004 53                      push rbx
    62 00000005 51                      push rcx
    63 00000006 52                      push rdx
    64 00000007 56                      push rsi
    65 00000008 57                      push rdi
    66 00000009 4150                    push r8
    67 0000000B 4151                    push r9
    68 0000000D 4152                    push r10
    69 0000000F 4153                    push r11
    70 00000011 4154                    push r12
    71 00000013 4155                    push r13
    72 00000015 4156                    push r14
    73 00000017 4157                    push r15
    74 00000019 9C                      pushf
    75                                  
    76                                  ; =============== First speed ================================
    77                                  
    78                                  ; Prompt for input of initial distance
    79                                  ; push qword 0
    80 0000001A B800000000              mov rax, 0
    81 0000001F 48BF-                   mov rdi, stringform       ; "%s"
    81 00000021 [6301000000000000] 
    82 00000029 48BE-                   mov rsi, initial_msg
    82 0000002B [0000000000000000] 
    83 00000033 E8(00000000)            call printf
    84                                  
    85                                  ; Get initial from user
    86                                  ; push qword 0
    87 00000038 B800000000              mov rax, 0
    88 0000003D 48BF-                   mov rdi, floatform        ; "%lf"
    88 0000003F [5F01000000000000] 
    89 00000047 4889E6                  mov rsi, rsp
    90 0000004A E8(00000000)            call scanf
    91 0000004F F2440F100424            movsd xmm8, [rsp]         ; initial speed input in xmm8 now
    92                                  ; pop rax
    93                                  
    94                                  ; Print initial from user
    95                                  ; push qword 0
    96                                  ; mov rax, 1
    97                                  ; mov rdi, debug
    98                                  ; call printf
    99                                  ; End of block
   100                                  
   101                                  ; =============== First leg ===================================
   102                                  
   103                                  ; Prompt for input of miles maintained
   104                                  ; push qword 0
   105 00000055 B800000000              mov rax, 0
   106 0000005A 48BF-                   mov rdi, stringform       ; "%s"
   106 0000005C [6301000000000000] 
   107 00000064 48BE-                   mov rsi, miles_msg
   107 00000066 [4700000000000000] 
   108 0000006E E8(00000000)            call printf
   109                                  
   110                                  ; Get miles from user
   111                                  ; push qword 0
   112 00000073 B800000000              mov rax, 0
   113 00000078 48BF-                   mov rdi, floatform
   113 0000007A [5F01000000000000] 
   114 00000082 4889E6                  mov rsi, rsp
   115 00000085 E8(00000000)            call scanf
   116 0000008A F2440F100C24            movsd xmm9, [rsp]         ; miles input in xmm9 now
   117                                  ; pop rax
   118                                  
   119                                  ; Print miles from user
   120                                  ; push qword 0
   121                                  ; mov rax, 1
   122                                  ; mov rdi, debug
   123                                  ; call printf
   124                                  ; End of block
   125                                  
   126                                  ; ================= Second speed =============================
   127                                  
   128                                  ; Prompt for input of final speed
   129                                  ; push qword 0
   130 00000090 B800000000              mov rax, 0
   131 00000095 48BF-                   mov rdi, stringform       ; "%s"
   131 00000097 [6301000000000000] 
   132 0000009F 48BE-                   mov rsi, final_seg_msg
   132 000000A1 [8500000000000000] 
   133 000000A9 E8(00000000)            call printf
   134                                  
   135                                  ; Get final_seg from user
   136                                  ; push qword 0
   137 000000AE B800000000              mov rax, 0
   138 000000B3 48BF-                   mov rdi, floatform
   138 000000B5 [5F01000000000000] 
   139 000000BD 4889E6                  mov rsi, rsp
   140 000000C0 E8(00000000)            call scanf
   141 000000C5 F2440F101424            movsd xmm10, [rsp]        ; final_seg input in xmm10 now
   142                                  ; pop rax
   143                                  
   144                                  ; Print final_seg from user
   145                                  ; push qword 0
   146                                  ; mov rax, 1
   147                                  ; mov rdi, debug
   148                                  ; call printf
   149                                  ; pop rax
   150                                  ; End of block
   151                                  
   152                                  ; ================= First leg / first speed ==================
   153                                  ; xmm8 = first speed (user input)
   154                                  ; xmm9 = first leg (user input)
   155 000000CB F2440F100C24            movsd xmm9, [rsp]
   156 000000D1 F2450F10D9              movsd xmm11, xmm9            ; copy first_leg into xmm11
   157 000000D6 F2450F5ED8              divsd xmm11, xmm8            ; xmm11 = xmm11 / first_speed
   158 000000DB F2450F10E3              movsd xmm12, xmm11           ; copy xmm11 into xmm12 for later use
   159 000000E0 F2440F102424            movsd xmm12, [rsp]
   160                                  
   161                                  ; mov rax, 1
   162                                  ; mov rdi, debug
   163                                  ; movsd xmm1, xmm12
   164                                  ; call printf
   165                                  ; pop rax
   166                                  
   167                                  ; ================= Second leg = 253.5 - first leg ===========
   168 000000E6 F2440F101C25-           movsd xmm11, qword [hotel_distance] ; xmm11 = 253.5
   168 000000EC [66010000]         
   169 000000F0 F2440F101C24            movsd xmm11, [rsp]
   170 000000F6 F2450F10FB              movsd xmm15, xmm11          ; copy xmm11 into xmm15 for later use
   171 000000FB F2450F5CD9              subsd xmm11, xmm9           ; xmm11 = xmm11 - xmm9 (second leg = 253.5 - first leg)
   172                                  
   173                                  ; ============= Second leg / second speed =======================
   174                                  ; xmm10 = second speed (user input)
   175                                  ; xmm11 = second leg
   176 00000100 F2450F5EDA              divsd xmm11, xmm10          ; xmm11 = second_leg / second_speed
   177                                  
   178                                  ; ============= Total travel time ===============================
   179                                  ; total travel time = (first leg / first speed) + (second leg / second speed)
   180                                  ; xmm11 = second speed avg
   181                                  ; xmm12 = first speed avg
   182 00000105 F2450F58DC              addsd xmm11, xmm12          ; total travel time
   183                                  
   184                                  ; ============= Average speed ===================================
   185                                  ; average speed = 253.5 / total travel time
   186                                  ; xmm11 = total travel time
   187                                  ; xmm15 = 253.5
   188 0000010A F2450F5EFB              divsd xmm15, xmm11          ; xmm15 = xmm15 / xmm11 (average speed = 253.5 / total travel time)
   189                                  
   190                                  ; ============= Output avg_speed_msg ============================
   191                                  ; push qword 0
   192 0000010F B801000000              mov rax, 1
   193 00000114 F2410F10D7              movsd xmm2, xmm15
   194 00000119 F20F101424              movsd xmm2, [rsp]          ; move average speed to top of stack
   195 0000011E 48BF-                   mov rdi, avg_speed_msg
   195 00000120 [CE00000000000000] 
   196 00000128 E8(00000000)            call printf
   197 0000012D B800000000              mov qword rax, 0
   198                                  ; pop rax
   199                                  
   200                                  ; ============= Output total travel time ========================
   201                                  ; push qword 0
   202 00000132 B801000000              mov rax, 1
   203 00000137 F2410F10CB              movsd xmm1, xmm11
   204 0000013C F20F100C24              movsd xmm1, [rsp]          ; move total travel time to top of stack
   205 00000141 48BF-                   mov rdi, total_msg
   205 00000143 [FA00000000000000] 
   206 0000014B E8(00000000)            call printf
   207 00000150 B800000000              mov qword rax, 0
   208                                  ; pop rax
   209                                  ; End of block
   210                                  
   211                                  ; Set return value
   212                                  ; setreturnvalue:
   213                                  ; push r14
   214 00000155 F20F100424              movsd xmm0, [rsp]
   215                                  ; pop r14
   216                                  
   217                                  ; =============== Restore GPRs ==========================
   218 0000015A 9D                      popf
   219 0000015B 415F                    pop r15
   220 0000015D 415E                    pop r14
   221 0000015F 415D                    pop r13
   222 00000161 415C                    pop r12
   223 00000163 415B                    pop r11
   224 00000165 415A                    pop r10
   225 00000167 4159                    pop r9
   226 00000169 4158                    pop r8
   227 0000016B 5F                      pop rdi
   228 0000016C 5E                      pop rsi
   229 0000016D 5A                      pop rdx
   230 0000016E 59                      pop rcx
   231 0000016F 5B                      pop rbx
   232 00000170 5D                      pop rbp
   233                                  
   234 00000171 C3                      ret
