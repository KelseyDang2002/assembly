     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/4/23
     4                                  ; Subject: CPSC 240-03 Assignment 1 Las Vegas Problem
     5                                  ; Filename: compute_trip.asm
     6                                  
     7                                  global las_vegas
     8                                  extern printf
     9                                  extern scanf
    10                                  
    11                                  section .data
    12                                    ; Constants
    13 00000000 506C6561736520656E-       initial_msg db "Please enter the speed for the initial segment of the trip (mph): ", 0
    13 00000009 746572207468652073-
    13 00000012 7065656420666F7220-
    13 0000001B 74686520696E697469-
    13 00000024 616C207365676D656E-
    13 0000002D 74206F662074686520-
    13 00000036 7472697020286D7068-
    13 0000003F 293A2000           
    14                                    initial_msg_len equ $-initial_msg
    15                                  
    16 00000043 496E697469616C2065-       initial_output db "Initial entered: %1.18lf", 10, 0
    16 0000004C 6E74657265643A2025-
    16 00000055 312E31386C660A00   
    17                                    initial_output_len equ $-initial_output
    18                                  
    19 0000005D 20466F7220686F7720-       miles_msg db " For how many miles will you maintain this average speed: ", 0
    19 00000066 6D616E79206D696C65-
    19 0000006F 732077696C6C20796F-
    19 00000078 75206D61696E746169-
    19 00000081 6E2074686973206176-
    19 0000008A 657261676520737065-
    19 00000093 65643A2000         
    20                                    miles_msg_len equ $-miles_msg
    21                                  
    22 00000098 4D696C6573206D6169-       miles_output db "Miles maintained entered: ", 10, 0
    22 000000A1 6E7461696E65642065-
    22 000000AA 6E74657265643A200A-
    22 000000B3 00                 
    23                                    miles_output_len equ $-miles_output
    24                                  
    25 000000B4 20576861742077696C-       final_seg_msg db " What will be your speed during the final segment of the trip (mph): ", 0
    25 000000BD 6C20626520796F7572-
    25 000000C6 207370656564206475-
    25 000000CF 72696E672074686520-
    25 000000D8 66696E616C20736567-
    25 000000E1 6D656E74206F662074-
    25 000000EA 686520747269702028-
    25 000000F3 6D7068293A2000     
    26                                    final_seg_msg_len equ $-final_seg_msg
    27                                  
    28 000000FA 46696E616C20737065-       final_output db "Final speed entered: ", 10, 0
    28 00000103 656420656E74657265-
    28 0000010C 643A200A00         
    29                                    final_output_len equ $-final_output
    30                                  
    31 00000111 20596F757220617665-       avg_speed_msg db " Your average speed will be %1.18lf mph.", 10, 0
    31 0000011A 726167652073706565-
    31 00000123 642077696C6C206265-
    31 0000012C 2025312E31386C6620-
    31 00000135 6D70682E0A00       
    32                                    avg_speed_msg_len equ $-avg_speed_msg
    33                                  
    34 0000013B 54686520746F74616C-       total_msg db "The total travel time will be %1.18lf hours.", 10, 0
    34 00000144 2074726176656C2074-
    34 0000014D 696D652077696C6C20-
    34 00000156 62652025312E31386C-
    34 0000015F 6620686F7572732E0A-
    34 00000168 00                 
    35                                    total_msg_len equ $-total_msg
    36                                  
    37 00000169 496E76616C6964206E-       invalid_msg db "Invalid number. Try again.", 10, 0
    37 00000172 756D6265722E205472-
    37 0000017B 7920616761696E2E0A-
    37 00000184 00                 
    38                                    invalid_msg_len equ $-invalid_msg
    39                                  
    40 00000185 256C6600                  floatform db "%lf", 0
    41 00000189 257300                    stringform db "%s", 0
    42 0000018C 0000000000B06F40          hotel_distance dq 253.5
    43                                  
    44                                  section .bss
    45                                    align 64
    46 00000000 <res 00000340>            backuparea resb 832
    47                                  
    48                                  section .text
    49                                  las_vegas:                ; start here
    50                                  
    51                                    ; Backup GPRs
    52 00000000 55                        push rbp
    53 00000001 4889E5                    mov rbp, rsp
    54 00000004 53                        push rbx
    55 00000005 51                        push rcx
    56 00000006 52                        push rdx
    57 00000007 56                        push rsi
    58 00000008 57                        push rdi
    59 00000009 4150                      push r8
    60 0000000B 4151                      push r9
    61 0000000D 4152                      push r10
    62 0000000F 4153                      push r11
    63 00000011 4154                      push r12
    64 00000013 4155                      push r13
    65 00000015 4156                      push r14
    66 00000017 4157                      push r15
    67 00000019 9C                        pushf
    68                                  
    69                                    ; Prompt for input of initial distance
    70 0000001A B800000000                mov rax, 0
    71 0000001F 48BF-                     mov rdi, stringform     ; "%s"
    71 00000021 [8901000000000000] 
    72 00000029 48BE-                     mov rsi, initial_msg
    72 0000002B [0000000000000000] 
    73 00000033 E8(00000000)              call printf
    74                                    ; End of block
    75                                  
    76                                    ; Get initial from user
    77 00000038 B800000000                mov rax, 0
    78 0000003D 48BF-                     mov rdi, floatform      ; "%lf"
    78 0000003F [8501000000000000] 
    79 00000047 4889E6                    mov rsi, rsp
    80 0000004A E8(00000000)              call scanf
    81 0000004F F2440F100424              movsd xmm8, [rsp]       ; initial speed input in xmm8 now
    82                                    ; End of block
    83                                  
    84                                    ; Print initial from user
    85 00000055 B801000000                mov rax, 1
    86 0000005A 48BE-                     mov rsi, initial_output
    86 0000005C [4300000000000000] 
    87 00000064 E8(00000000)              call printf
    88                                    ; End of block
    89                                  
    90                                    ; Prompt for input of miles maintained
    91 00000069 B800000000                mov rax, 0
    92 0000006E 48BF-                     mov rdi, stringform     ; "%s"
    92 00000070 [8901000000000000] 
    93 00000078 48BE-                     mov rsi, miles_msg
    93 0000007A [5D00000000000000] 
    94 00000082 E8(00000000)              call printf
    95                                    ; End of block
    96                                  
    97                                    ; Get miles from user
    98 00000087 B800000000                mov rax, 0
    99 0000008C 48BF-                     mov rdi, floatform
    99 0000008E [8501000000000000] 
   100 00000096 4889E6                    mov rsi, rsp
   101 00000099 E8(00000000)              call scanf
   102 0000009E F2440F100C24              movsd xmm9, [rsp]       ; miles input in xmm9 now
   103                                    ; End of block
   104                                  
   105                                    ; Print miles from user
   106 000000A4 B801000000                mov rax, 1
   107 000000A9 48BE-                     mov rsi, miles_output
   107 000000AB [9800000000000000] 
   108 000000B3 E8(00000000)              call printf
   109                                    ; End of block
   110                                  
   111                                    ; Prompt for input of final speed
   112 000000B8 B800000000                mov rax, 0
   113 000000BD 48BF-                     mov rdi, stringform     ; "%s"
   113 000000BF [8901000000000000] 
   114 000000C7 48BE-                     mov rsi, final_seg_msg
   114 000000C9 [B400000000000000] 
   115 000000D1 E8(00000000)              call printf
   116                                    ; End of block
   117                                  
   118                                    ; Get final_seg from user
   119 000000D6 B800000000                mov rax, 0
   120 000000DB 48BF-                     mov rdi, floatform
   120 000000DD [8501000000000000] 
   121 000000E5 4889E6                    mov rsi, rsp
   122 000000E8 E8(00000000)              call scanf
   123 000000ED F2440F101424              movsd xmm10, [rsp] ; final_seg input in xmm10 now
   124                                    ; End of block
   125                                  
   126                                    ; Print final_seg from user
   127 000000F3 B801000000                mov rax, 1
   128 000000F8 48BE-                     mov rsi, final_output
   128 000000FA [FA00000000000000] 
   129 00000102 E8(00000000)              call printf
   130                                    ; End of block
   131                                  
   132                                    ; Block to copy 253.5 into xmm11
   133 00000107 F2440F101C25-             movsd xmm11, qword [hotel_distance]
   133 0000010D [8C010000]         
   134                                    ; End of block
   135                                  
   136                                    ; Block to subtract (hotel_distance - miles input)
   137 00000111 F2450F5CD9                subsd xmm11, xmm9     ; xmm11 = xmm11 - xmm9
   138                                    ; End of block
   139                                  
   140                                    ; Block to divide (initial speed / miles input)
   141 00000116 F2450F5EC8                divsd xmm9, xmm8      ; xmm9 = xmm9 / xmm8, hours in xmm9 now
   142                                    ; End of block
   143                                  
   144                                    ; Output avg_speed_msg
   145 0000011B B801000000                mov rax, 1
   146 00000120 48BF-                     mov rdi, avg_speed_msg
   146 00000122 [1101000000000000] 
   147 0000012A E8(00000000)              call printf
   148                                    ; End of block
   149                                  
   150                                    ; Output total travel time
   151 0000012F B801000000                mov rax, 1
   152 00000134 48BF-                     mov rdi, total_msg
   152 00000136 [3B01000000000000] 
   153 0000013E E8(00000000)              call printf
   154                                    ; End of block
   155                                  
   156                                    ; Block to set return value
   157                                  setreturnvalue:
   158 00000143 4156                      push r14
   159 00000145 F20F100424                movsd xmm0, [rsp]
   160 0000014A 415E                      pop r14
   161                                  
   162                                    ; Restore GPRs
   163 0000014C 9D                        popf
   164 0000014D 415F                      pop r15
   165 0000014F 415E                      pop r14
   166 00000151 415D                      pop r13
   167 00000153 415C                      pop r12
   168 00000155 415B                      pop r11
   169 00000157 415A                      pop r10
   170 00000159 4159                      pop r9
   171 0000015B 4158                      pop r8
   172 0000015D 5F                        pop rdi
   173 0000015E 5E                        pop rsi
   174 0000015F 5A                        pop rdx
   175 00000160 59                        pop rcx
   176 00000161 5B                        pop rbx
   177 00000162 5D                        pop rbp
   178                                  
   179 00000163 C3                        ret
