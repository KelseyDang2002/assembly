     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 9/25/23
     4                                  ; Subject: CPSC 240-03 Assignment 2 Arrays
     5                                  ; Filename: fill_array.asm
     6                                  ; Purpose: This file gets user input of floats in the array.
     7                                  
     8                                  global fill_array
     9                                  extern printf
    10                                  extern scanf
    11                                  
    12                                  segment .data
    13 00000000 256C6620656E746572-     debug_msg db "%lf entered", 10, 0
    13 00000009 65640A00           
    14                                  
    15 0000000D 256C6600                floatform db "%lf", 0
    16 00000011 257300                  stringform db "%s", 0
    17                                  
    18                                  segment .bss
    19                                  align 64
    20 00000000 <res 00000340>          backuparea resb 832
    21                                  
    22                                  segment .text
    23                                  fill_array:
    24                                  
    25                                  ; ============= Backup GPRs ============================
    26 00000000 55                      push rbp
    27 00000001 4889E5                  mov rbp, rsp
    28 00000004 53                      push rbx
    29 00000005 51                      push rcx
    30 00000006 52                      push rdx
    31 00000007 56                      push rsi
    32 00000008 57                      push rdi
    33 00000009 4150                    push r8
    34 0000000B 4151                    push r9
    35 0000000D 4152                    push r10
    36 0000000F 4153                    push r11
    37 00000011 4154                    push r12
    38 00000013 4155                    push r13
    39 00000015 4156                    push r14
    40 00000017 4157                    push r15
    41 00000019 9C                      pushf
    42                                  
    43                                  ; =============== xsave =================================
    44 0000001A B808000000              mov rax, 8
    45 0000001F BA00000000              mov rdx, 0
    46 00000024 0FAE2425[00000000]      xsave [backuparea]
    47                                  
    48                                  ; =============== Backup r14 and r15 ====================
    49 0000002C 58                      pop rax               ; fixed a seg fault
    50 0000002D 4989FE                  mov r14, rdi          ; r14 is the array
    51 00000030 4989F7                  mov r15, rsi          ; r15 is the number of cells
    52 00000033 41BD00000000            mov r13, 0            ; r13 is the starting index 0
    53                                  
    54                                  ; =============== Fill array ============================
    55 00000039 4D31ED                  xor r13, r13          ; r13 is the starting index 0
    56                                  
    57                                  beginloop:
    58 0000003C 4D39FD                  cmp r13, r15          ; if current index is >= number of cells (r15)
    59 0000003F 742B                    je endloop            ; end the loop
    60                                  
    61                                  ; =============== Receive input from user ===============
    62 00000041 B800000000              mov rax, 0
    63 00000046 48BF-                   mov rdi, floatform    ; %lf
    63 00000048 [0D00000000000000] 
    64 00000050 6A00                    push qword 0          ; push 0 before calling scanf or seg fault
    65 00000052 4889E6                  mov rsi, rsp
    66 00000055 E8(00000000)            call scanf
    67                                  
    68 0000005A 4898                    cdqe                  ; convert doubleword to quadword for rax
    69 0000005C 4883F8FF                cmp rax, -1           ; check for CTRL + D
    70 00000060 740A                    je endloop            ; jump to end of loop if CTRL + D
    71                                  
    72 00000062 5B                      pop rbx
    73 00000063 4B891CEE                mov [r14+8*r13], rbx
    74 00000067 49FFC5                  inc r13               ; r13++
    75 0000006A EBD0                    jmp beginloop         ; start loop again
    76                                  
    77                                  endloop:
    78 0000006C 4C89E8                  mov rax, r13
    79                                  
    80                                  ; =============== xrstor ================================
    81                                  ; mov rax, 8
    82                                  ; mov rdx, 0
    83                                  ; xrstor [backuparea]
    84                                  
    85                                  ; =============== Restore GPRs ==========================
    86 0000006F 9D                      popf
    87 00000070 415F                    pop r15
    88 00000072 415E                    pop r14
    89 00000074 415D                    pop r13
    90 00000076 415C                    pop r12
    91 00000078 415B                    pop r11
    92 0000007A 415A                    pop r10
    93 0000007C 4159                    pop r9
    94 0000007E 4158                    pop r8
    95 00000080 5F                      pop rdi
    96 00000081 5E                      pop rsi
    97 00000082 5A                      pop rdx
    98 00000083 59                      pop rcx
    99 00000084 5B                      pop rbx
   100 00000085 5D                      pop rbp
   101                                  
   102 00000086 C3                      ret
