     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 9/25/23
     4                                  ; Subject: CPSC 240-03 Assignment 2 Arrays
     5                                  ; Filename: output_array.asm
     6                                  ; Purpose: This file prints the elements in the array.
     7                                  
     8                                  global output_array
     9                                  extern printf
    10                                  
    11                                  segment .data
    12 00000000 6F75747075745F6172-     print_data db "output_array: %16.10lf", 10, 0
    12 00000009 7261793A202531362E-
    12 00000012 31306C660A00       
    13                                  
    14 00000018 256C6600                floatform db "%lf", 0
    15 0000001C 257300                  stringform db "%s", 0
    16                                  
    17                                  segment .bss
    18                                  align 64
    19 00000000 <res 00000340>          backuparea resb 832
    20                                  
    21                                  segment .text
    22                                  output_array:
    23                                  
    24                                  ; ============= Backup GPRs ============================
    25 00000000 55                      push rbp
    26 00000001 4889E5                  mov rbp, rsp
    27 00000004 53                      push rbx
    28 00000005 51                      push rcx
    29 00000006 52                      push rdx
    30 00000007 56                      push rsi
    31 00000008 57                      push rdi
    32 00000009 4150                    push r8
    33 0000000B 4151                    push r9
    34 0000000D 4152                    push r10
    35 0000000F 4153                    push r11
    36 00000011 4154                    push r12
    37 00000013 4155                    push r13
    38 00000015 4156                    push r14
    39 00000017 4157                    push r15
    40 00000019 9C                      pushf
    41                                  
    42                                  ; =============== xsave =================================
    43 0000001A B808000000              mov rax, 8
    44 0000001F BA00000000              mov rdx, 0
    45 00000024 0FAE2425[00000000]      xsave [backuparea]
    46                                  
    47                                  ; =============== Backup r14 and r15 ====================
    48 0000002C 4989FE                  mov r14, rdi          ; r14 is the array
    49 0000002F 4989F7                  mov r15, rsi          ; r15 is the number of cells
    50 00000032 41BD00000000            mov r13, 0            ; r13 is the starting index 0
    51                                  
    52                                  ; =============== Display the array =====================
    53 00000038 4D31ED                  xor r13, r13          ; r13 is the starting index 0
    54                                  
    55                                  beginloop:
    56 0000003B 4D39FD                  cmp r13, r15          ; if current index is >= number of cells (r15)
    57 0000003E 741F                    je endloop            ; end the loop
    58                                  
    59                                  ; =============== Print data in array ===================
    60 00000040 F2430F1004EE            movsd xmm0, [r14+8*r13]
    61 00000046 B801000000              mov rax, 1
    62 0000004B 48BF-                   mov rdi, print_data
    62 0000004D [0000000000000000] 
    63 00000055 E8(00000000)            call printf
    64                                  
    65 0000005A 49FFC5                  inc r13
    66 0000005D EBDC                    jmp beginloop
    67                                  
    68                                  endloop:
    69 0000005F 4C89E8                  mov rax, r13
    70                                  
    71                                  ; =============== xrstor ================================
    72 00000062 B808000000              mov rax, 8
    73 00000067 BA00000000              mov rdx, 0
    74 0000006C 0FAE2C25[00000000]      xrstor [backuparea]
    75                                  
    76                                  ; =============== Restore GPRs ==========================
    77 00000074 9D                      popf
    78 00000075 415F                    pop r15
    79 00000077 415E                    pop r14
    80 00000079 415D                    pop r13
    81 0000007B 415C                    pop r12
    82 0000007D 415B                    pop r11
    83 0000007F 415A                    pop r10
    84 00000081 4159                    pop r9
    85 00000083 4158                    pop r8
    86 00000085 5F                      pop rdi
    87 00000086 5E                      pop rsi
    88 00000087 5A                      pop rdx
    89 00000088 59                      pop rcx
    90 00000089 5B                      pop rbx
    91 0000008A 5D                      pop rbp
    92                                  
    93 0000008B C3                      ret
