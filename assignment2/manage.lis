     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/25/23
     4                                  ; Subject: CPSC 240-03 Assignment 2 Arrays
     5                                  ; Filename: manage.asm
     6                                  
     7                                  global manage
     8                                  extern fill_array
     9                                  extern sum_array
    10                                  extern output_array
    11                                  extern printf
    12                                  extern scanf
    13                                  max_size equ 8
    14                                  
    15                                  segment .data
    16 00000000 6D616E6167653A2057-     welcome_msg db "manage: We will take care of all your array needs.", 10, 0
    16 00000009 652077696C6C207461-
    16 00000012 6B652063617265206F-
    16 0000001B 6620616C6C20796F75-
    16 00000024 72206172726179206E-
    16 0000002D 656564732E0A00     
    17                                  
    18 00000034 6D616E6167653A2050-     input_msg db "manage: Please input float numbers followed by ws. After the last number, press ws followed by CTRL + D: ", 10, 0
    18 0000003D 6C6561736520696E70-
    18 00000046 757420666C6F617420-
    18 0000004F 6E756D626572732066-
    18 00000058 6F6C6C6F7765642062-
    18 00000061 792077732E20416674-
    18 0000006A 657220746865206C61-
    18 00000073 7374206E756D626572-
    18 0000007C 2C2070726573732077-
    18 00000085 7320666F6C6C6F7765-
    18 0000008E 64206279204354524C-
    18 00000097 202B20443A200A00   
    19                                  
    20 0000009F 0A6D616E6167653A20-     receive_input_msg db 10, "manage: Thank you. The numbers in the array are: ", 10, 10, 0
    20 000000A8 5468616E6B20796F75-
    20 000000B1 2E20546865206E756D-
    20 000000BA 6265727320696E2074-
    20 000000C3 686520617272617920-
    20 000000CC 6172653A200A0A00   
    21                                  
    22 000000D4 0A6D616E6167653A20-     sum_msg db 10, "manage: The sum of the numbers in the array is %lf", 10, 0
    22 000000DD 5468652073756D206F-
    22 000000E6 6620746865206E756D-
    22 000000EF 6265727320696E2074-
    22 000000F8 686520617272617920-
    22 00000101 697320256C660A00   
    23                                  
    24 00000109 6D616E6167653A2054-     end_msg db "manage: Thank you for using Array Management System.", 10, 0
    24 00000112 68616E6B20796F7520-
    24 0000011B 666F72207573696E67-
    24 00000124 204172726179204D61-
    24 0000012D 6E6167656D656E7420-
    24 00000136 53797374656D2E0A00 
    25                                  
    26 0000013F 256C6600                floatform db "%lf", 0
    27 00000143 257300                  stringform db "%s", 0
    28                                  
    29                                  segment .bss
    30                                  align 64
    31 00000000 <res 00000340>          backuparea resb 832
    32 00000340 <res 00000040>          array resq max_size ; array is a number where cell 0 starts in memory
    33                                  
    34                                  segment .text
    35                                  manage:
    36                                  
    37                                  ; ============= Backup GPRs ============================
    38 00000000 55                      push rbp
    39 00000001 4889E5                  mov rbp, rsp
    40 00000004 53                      push rbx
    41 00000005 51                      push rcx
    42 00000006 52                      push rdx
    43 00000007 56                      push rsi
    44 00000008 57                      push rdi
    45 00000009 4150                    push r8
    46 0000000B 4151                    push r9
    47 0000000D 4152                    push r10
    48 0000000F 4153                    push r11
    49 00000011 4154                    push r12
    50 00000013 4155                    push r13
    51 00000015 4156                    push r14
    52 00000017 4157                    push r15
    53 00000019 9C                      pushf
    54                                  
    55                                  ; =============== xsave =================================
    56                                  ; mov rax, 7
    57                                  ; mov rdx, 0
    58                                  ; xsave [backuparea]
    59                                  
    60                                  ; =============== Backup r14 and r15 ====================
    61 0000001A 4989FE                  mov r14, rdi          ; r14 is the array
    62 0000001D 4989F7                  mov r15, rsi          ; r15 is the number of cells
    63                                  
    64                                  ; =============== Print welcome_msg =====================
    65 00000020 B800000000              mov rax, 0
    66 00000025 48BF-                   mov rdi, stringform
    66 00000027 [4301000000000000] 
    67 0000002F 48BE-                   mov rsi, welcome_msg
    67 00000031 [0000000000000000] 
    68 00000039 E8(00000000)            call printf
    69                                  
    70                                  ; =============== Print input_msg =======================
    71 0000003E B800000000              mov rax, 0
    72 00000043 48BF-                   mov rdi, stringform
    72 00000045 [4301000000000000] 
    73 0000004D 48BE-                   mov rsi, input_msg
    73 0000004F [3400000000000000] 
    74 00000057 E8(00000000)            call printf
    75                                  
    76                                  ; =============== Call fill_array =======================
    77 0000005C B800000000              mov rax, 0
    78 00000061 48BF-                   mov rdi, array
    78 00000063 [4003000000000000] 
    79 0000006B BE09000000              mov rsi, max_size + 1
    80 00000070 E8(00000000)            call fill_array
    81 00000075 4989C6                  mov r14, rax ; r14 holds the number of values stored in array
    82                                  
    83                                  ; =============== Print receive_input_msg ===============
    84 00000078 B800000000              mov rax, 0
    85 0000007D 48BF-                   mov rdi, stringform
    85 0000007F [4301000000000000] 
    86 00000087 48BE-                   mov rsi, receive_input_msg
    86 00000089 [9F00000000000000] 
    87 00000091 E8(00000000)            call printf
    88                                  
    89                                  ; =============== Call output_array =====================
    90 00000096 B800000000              mov rax, 0
    91 0000009B 48BF-                   mov rdi, array
    91 0000009D [4003000000000000] 
    92 000000A5 4C89F6                  mov rsi, r14
    93 000000A8 E8(00000000)            call output_array
    94                                  
    95                                  ; =============== Call sum_array ========================
    96                                  
    97                                  ; =============== Print sum_msg =========================
    98 000000AD B800000000              mov rax, 0
    99 000000B2 48BF-                   mov rdi, stringform
    99 000000B4 [4301000000000000] 
   100 000000BC 48BE-                   mov rsi, sum_msg
   100 000000BE [D400000000000000] 
   101 000000C6 E8(00000000)            call printf
   102                                  
   103                                  ; =============== Print end_msg =========================
   104 000000CB B800000000              mov rax, 0
   105 000000D0 48BF-                   mov rdi, stringform
   105 000000D2 [4301000000000000] 
   106 000000DA 48BE-                   mov rsi, end_msg
   106 000000DC [0901000000000000] 
   107 000000E4 E8(00000000)            call printf
   108                                  
   109                                  ; =============== Return execution to driver ============
   110 000000E9 660F57C0                xorpd xmm0, xmm0
   111                                  
   112                                  ; =============== xrstor ================================
   113                                  ; mov rax, 7
   114                                  ; mov rdx, 0
   115                                  ; xrstor [backuparea]
   116                                  
   117                                  ; =============== Restore GPRs ==========================
   118 000000ED 9D                      popf
   119 000000EE 415F                    pop r15
   120 000000F0 415E                    pop r14
   121 000000F2 415D                    pop r13
   122 000000F4 415C                    pop r12
   123 000000F6 415B                    pop r11
   124 000000F8 415A                    pop r10
   125 000000FA 4159                    pop r9
   126 000000FC 4158                    pop r8
   127 000000FE 5F                      pop rdi
   128 000000FF 5E                      pop rsi
   129 00000100 5A                      pop rdx
   130 00000101 59                      pop rcx
   131 00000102 5B                      pop rbx
   132 00000103 5D                      pop rbp
   133                                  
   134 00000104 C3                      ret
