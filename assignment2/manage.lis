     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/25/23
     4                                  ; Subject: CPSC 240-03 Assignment 2 Arrays
     5                                  ; Filename: manage.asm
     6                                  ; Purpose: This file manages fill_array, output_array, and sum_array in Array Management System.
     7                                  ; Then manage gets called by the driver.
     8                                  
     9                                  global manage
    10                                  extern fill_array
    11                                  extern sum_array
    12                                  extern output_array
    13                                  extern printf
    14                                  extern scanf
    15                                  max_size equ 8
    16                                  
    17                                  segment .data
    18 00000000 6D616E6167653A2057-     welcome_msg db "manage: We will take care of all your array needs.", 10, 0
    18 00000009 652077696C6C207461-
    18 00000012 6B652063617265206F-
    18 0000001B 6620616C6C20796F75-
    18 00000024 72206172726179206E-
    18 0000002D 656564732E0A00     
    19                                  
    20 00000034 6D616E6167653A2050-     input_msg db "manage: Please input float numbers followed by ws. After the last number, press ws followed by CTRL + D: ", 10, 0
    20 0000003D 6C6561736520696E70-
    20 00000046 757420666C6F617420-
    20 0000004F 6E756D626572732066-
    20 00000058 6F6C6C6F7765642062-
    20 00000061 792077732E20416674-
    20 0000006A 657220746865206C61-
    20 00000073 7374206E756D626572-
    20 0000007C 2C2070726573732077-
    20 00000085 7320666F6C6C6F7765-
    20 0000008E 64206279204354524C-
    20 00000097 202B20443A200A00   
    21                                  
    22 0000009F 0A6D616E6167653A20-     receive_input_msg db 10, "manage: Thank you. The numbers in the array are: ", 10, 10, 0
    22 000000A8 5468616E6B20796F75-
    22 000000B1 2E20546865206E756D-
    22 000000BA 6265727320696E2074-
    22 000000C3 686520617272617920-
    22 000000CC 6172653A200A0A00   
    23                                  
    24 000000D4 0A6D616E6167653A20-     sum_msg db 10, "manage: The sum of the numbers in the array is %16.10lf", 10, 0
    24 000000DD 5468652073756D206F-
    24 000000E6 6620746865206E756D-
    24 000000EF 6265727320696E2074-
    24 000000F8 686520617272617920-
    24 00000101 6973202531362E3130-
    24 0000010A 6C660A00           
    25                                  
    26 0000010E 6D616E6167653A2054-     end_msg db "manage: Thank you for using Array Management System.", 10, 0
    26 00000117 68616E6B20796F7520-
    26 00000120 666F72207573696E67-
    26 00000129 204172726179204D61-
    26 00000132 6E6167656D656E7420-
    26 0000013B 53797374656D2E0A00 
    27                                  
    28 00000144 256C6600                floatform db "%lf", 0
    29 00000148 257300                  stringform db "%s", 0
    30                                  
    31                                  segment .bss
    32                                  align 64
    33 00000000 <res 00000340>          backuparea resb 832
    34 00000340 <res 00000040>          array resq max_size ; array is a number where cell 0 starts in memory
    35                                  
    36                                  segment .text
    37                                  manage:
    38                                  
    39                                  ; ============= Backup GPRs ============================
    40 00000000 55                      push rbp
    41 00000001 4889E5                  mov rbp, rsp
    42 00000004 53                      push rbx
    43 00000005 51                      push rcx
    44 00000006 52                      push rdx
    45 00000007 56                      push rsi
    46 00000008 57                      push rdi
    47 00000009 4150                    push r8
    48 0000000B 4151                    push r9
    49 0000000D 4152                    push r10
    50 0000000F 4153                    push r11
    51 00000011 4154                    push r12
    52 00000013 4155                    push r13
    53 00000015 4156                    push r14
    54 00000017 4157                    push r15
    55 00000019 9C                      pushf
    56                                  
    57                                  ; =============== xsave =================================
    58 0000001A B808000000              mov rax, 8
    59 0000001F BA00000000              mov rdx, 0
    60 00000024 0FAE2425[00000000]      xsave [backuparea]
    61                                  
    62                                  ; =============== Print welcome_msg =====================
    63 0000002C B800000000              mov rax, 0
    64 00000031 48BF-                   mov rdi, stringform
    64 00000033 [4801000000000000] 
    65 0000003B 48BE-                   mov rsi, welcome_msg
    65 0000003D [0000000000000000] 
    66 00000045 E8(00000000)            call printf
    67                                  
    68                                  ; =============== Print input_msg =======================
    69 0000004A B800000000              mov rax, 0
    70 0000004F 48BF-                   mov rdi, stringform
    70 00000051 [4801000000000000] 
    71 00000059 48BE-                   mov rsi, input_msg
    71 0000005B [3400000000000000] 
    72 00000063 E8(00000000)            call printf
    73                                  
    74                                  ; =============== Call fill_array =======================
    75 00000068 B800000000              mov rax, 0
    76 0000006D 48BF-                   mov rdi, array
    76 0000006F [4003000000000000] 
    77 00000077 BE09000000              mov rsi, max_size+1
    78 0000007C E8(00000000)            call fill_array
    79 00000081 4989C6                  mov r14, rax ; r14 holds the number of values stored in array
    80                                  
    81                                  ; =============== Print receive_input_msg ===============
    82 00000084 B800000000              mov rax, 0
    83 00000089 48BF-                   mov rdi, stringform
    83 0000008B [4801000000000000] 
    84 00000093 48BE-                   mov rsi, receive_input_msg
    84 00000095 [9F00000000000000] 
    85 0000009D E8(00000000)            call printf
    86                                  
    87                                  ; =============== Call output_array =====================
    88 000000A2 B800000000              mov rax, 0
    89 000000A7 48BF-                   mov rdi, array
    89 000000A9 [4003000000000000] 
    90 000000B1 4C89F6                  mov rsi, r14
    91 000000B4 E8(00000000)            call output_array
    92                                  
    93                                  ; =============== Call sum_array ========================
    94 000000B9 B800000000              mov rax, 0
    95 000000BE 48BF-                   mov rdi, array
    95 000000C0 [4003000000000000] 
    96 000000C8 4C89F6                  mov rsi, r14
    97 000000CB E8(00000000)            call sum_array
    98 000000D0 F20F110424              movsd [rsp], xmm0
    99                                  
   100                                  ; =============== Print sum_msg =========================
   101 000000D5 B801000000              mov rax, 1
   102 000000DA 48BF-                   mov rdi, sum_msg
   102 000000DC [D400000000000000] 
   103 000000E4 E8(00000000)            call printf
   104                                  
   105                                  ; =============== Print end_msg =========================
   106 000000E9 B800000000              mov rax, 0
   107 000000EE 48BF-                   mov rdi, stringform
   107 000000F0 [4801000000000000] 
   108 000000F8 48BE-                   mov rsi, end_msg
   108 000000FA [0E01000000000000] 
   109 00000102 E8(00000000)            call printf
   110                                  
   111                                  ; =============== Return execution to driver ============
   112 00000107 F20F100424              movsd xmm0, [rsp]
   113                                  
   114                                  ; =============== xrstor ================================
   115 0000010C B808000000              mov rax, 8
   116 00000111 BA00000000              mov rdx, 0
   117 00000116 0FAE2C25[00000000]      xrstor [backuparea]
   118                                  
   119                                  ; =============== Restore GPRs ==========================
   120 0000011E 9D                      popf
   121 0000011F 415F                    pop r15
   122 00000121 415E                    pop r14
   123 00000123 415D                    pop r13
   124 00000125 415C                    pop r12
   125 00000127 415B                    pop r11
   126 00000129 415A                    pop r10
   127 0000012B 4159                    pop r9
   128 0000012D 4158                    pop r8
   129 0000012F 5F                      pop rdi
   130 00000130 5E                      pop rsi
   131 00000131 5A                      pop rdx
   132 00000132 59                      pop rcx
   133 00000133 5B                      pop rbx
   134 00000134 5D                      pop rbp
   135                                  
   136 00000135 C3                      ret
