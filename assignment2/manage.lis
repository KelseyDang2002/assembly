     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/25/23
     4                                  ; Subject: CPSC 240-03 Assignment 2 Arrays
     5                                  ; Filename: manage.asm
     6                                  
     7                                  global manage
     8                                  extern fill_array
     9                                  extern sum_array
    10                                  extern output_array
    11                                  extern printf
    12                                  extern scanf
    13                                  max_size equ 8
    14                                  
    15                                  segment .data
    16 00000000 6D616E6167653A2057-     welcome_msg db "manage: We will take care of all your array needs.", 10, 0
    16 00000009 652077696C6C207461-
    16 00000012 6B652063617265206F-
    16 0000001B 6620616C6C20796F75-
    16 00000024 72206172726179206E-
    16 0000002D 656564732E0A00     
    17                                  
    18 00000034 6D616E6167653A2050-     input_msg db "manage: Please input float numbers followed by ws. After the last number, press ws followed by CTRL + D: ", 10, 0
    18 0000003D 6C6561736520696E70-
    18 00000046 757420666C6F617420-
    18 0000004F 6E756D626572732066-
    18 00000058 6F6C6C6F7765642062-
    18 00000061 792077732E20416674-
    18 0000006A 657220746865206C61-
    18 00000073 7374206E756D626572-
    18 0000007C 2C2070726573732077-
    18 00000085 7320666F6C6C6F7765-
    18 0000008E 64206279204354524C-
    18 00000097 202B20443A200A00   
    19                                  
    20 0000009F 6D616E6167653A2054-     receive_input_msg db "manage: Thank you. The numbers in the array are: ", 10, 0
    20 000000A8 68616E6B20796F752E-
    20 000000B1 20546865206E756D62-
    20 000000BA 65727320696E207468-
    20 000000C3 652061727261792061-
    20 000000CC 72653A200A00       
    21                                  
    22 000000D2 6D616E6167653A2054-     sum_msg db "manage: The sum of the numbers in the array is %lf", 10, 0
    22 000000DB 68652073756D206F66-
    22 000000E4 20746865206E756D62-
    22 000000ED 65727320696E207468-
    22 000000F6 652061727261792069-
    22 000000FF 7320256C660A00     
    23                                  
    24 00000106 6D616E6167653A2054-     end_msg db "manage: Thank you for using Array Management System.", 10, 0
    24 0000010F 68616E6B20796F7520-
    24 00000118 666F72207573696E67-
    24 00000121 204172726179204D61-
    24 0000012A 6E6167656D656E7420-
    24 00000133 53797374656D2E0A00 
    25                                  
    26 0000013C 256C6600                floatform db "%lf", 0
    27 00000140 257300                  stringform db "%s", 0
    28                                  
    29                                  segment .bss
    30 00000000 <res 00000040>          array resq max_size ; array is a number where cell 0 starts in memory
    31                                  
    32                                  segment .text
    33                                  manage:
    34                                  
    35                                  ; ============= Backup GPRs ============================
    36 00000000 55                      push rbp
    37 00000001 4889E5                  mov rbp, rsp
    38 00000004 53                      push rbx
    39 00000005 51                      push rcx
    40 00000006 52                      push rdx
    41 00000007 56                      push rsi
    42 00000008 57                      push rdi
    43 00000009 4150                    push r8
    44 0000000B 4151                    push r9
    45 0000000D 4152                    push r10
    46 0000000F 4153                    push r11
    47 00000011 4154                    push r12
    48 00000013 4155                    push r13
    49 00000015 4156                    push r14
    50 00000017 4157                    push r15
    51 00000019 9C                      pushf
    52                                  
    53                                  ; =============== Print welcome_msg =====================
    54 0000001A B800000000              mov rax, 0
    55 0000001F 48BF-                   mov rdi, stringform
    55 00000021 [4001000000000000] 
    56 00000029 48BE-                   mov rsi, welcome_msg
    56 0000002B [0000000000000000] 
    57 00000033 E8(00000000)            call printf
    58                                  
    59                                  ; =============== Print input_msg =======================
    60 00000038 B800000000              mov rax, 0
    61 0000003D 48BF-                   mov rdi, stringform
    61 0000003F [4001000000000000] 
    62 00000047 48BE-                   mov rsi, input_msg
    62 00000049 [3400000000000000] 
    63 00000051 E8(00000000)            call printf
    64                                  
    65                                  ; =============== Call fill_array =======================
    66 00000056 B800000000              mov rax, 0
    67 0000005B 48BF-                   mov rdi, array
    67 0000005D [0000000000000000] 
    68 00000065 BE08000000              mov rsi, max_size
    69 0000006A E8(00000000)            call fill_array
    70 0000006F 4989C6                  mov r14, rax ; r14 holds the number of values stored in array
    71                                  
    72                                  ; =============== Print receive_input_msg ===============
    73 00000072 B800000000              mov rax, 0
    74 00000077 48BF-                   mov rdi, stringform
    74 00000079 [4001000000000000] 
    75 00000081 48BE-                   mov rsi, receive_input_msg
    75 00000083 [9F00000000000000] 
    76 0000008B E8(00000000)            call printf
    77                                  
    78                                  ; =============== Call output_array =====================
    79                                  ; mov rax, 0
    80                                  ; mov rdi, array
    81                                  ; mov rsi, r14
    82                                  ; call output_array
    83                                  
    84                                  ; =============== Call sum_array ========================
    85                                  
    86                                  ; =============== Print sum_msg =========================
    87 00000090 B800000000              mov rax, 0
    88 00000095 48BF-                   mov rdi, stringform
    88 00000097 [4001000000000000] 
    89 0000009F 48BE-                   mov rsi, sum_msg
    89 000000A1 [D200000000000000] 
    90 000000A9 E8(00000000)            call printf
    91                                  
    92                                  ; =============== Print end_msg =========================
    93 000000AE B800000000              mov rax, 0
    94 000000B3 48BF-                   mov rdi, stringform
    94 000000B5 [4001000000000000] 
    95 000000BD 48BE-                   mov rsi, end_msg
    95 000000BF [0601000000000000] 
    96 000000C7 E8(00000000)            call printf
    97                                  
    98                                  ; =============== Return execution to driver ============
    99 000000CC 660F57C0                xorpd xmm0, xmm0
   100                                  
   101                                  ; =============== Restore GPRs ==========================
   102 000000D0 9D                      popf
   103 000000D1 415F                    pop r15
   104 000000D3 415E                    pop r14
   105 000000D5 415D                    pop r13
   106 000000D7 415C                    pop r12
   107 000000D9 415B                    pop r11
   108 000000DB 415A                    pop r10
   109 000000DD 4159                    pop r9
   110 000000DF 4158                    pop r8
   111 000000E1 5F                      pop rdi
   112 000000E2 5E                      pop rsi
   113 000000E3 5A                      pop rdx
   114 000000E4 59                      pop rcx
   115 000000E5 5B                      pop rbx
   116 000000E6 5D                      pop rbp
   117                                  
   118 000000E7 C3                      ret
