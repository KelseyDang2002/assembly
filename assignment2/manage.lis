     1                                  ; Author: Kelsey Dang
     2                                  ; Email: kdangdo2002@csu.fullerton.edu
     3                                  ; Due Date: 10/25/23
     4                                  ; Subject: CPSC 240-03 Assignment 2 Arrays
     5                                  ; Filename: manage.asm
     6                                  
     7                                  global manage
     8                                  extern fill_array
     9                                  extern sum_array
    10                                  extern output_array
    11                                  extern printf
    12                                  extern scanf
    13                                  max_size equ 8
    14                                  
    15                                  segment .data
    16 00000000 57652077696C6C2074-     welcome_msg db "We will take care of all your array needs.", 10, 0
    16 00000009 616B65206361726520-
    16 00000012 6F6620616C6C20796F-
    16 0000001B 757220617272617920-
    16 00000024 6E656564732E0A00   
    17                                  
    18 0000002C 506C6561736520696E-     input_msg db "Please input float numbers followed by ws. After the last number, press ws followed by CTRL + D: ", 10, 0
    18 00000035 70757420666C6F6174-
    18 0000003E 206E756D6265727320-
    18 00000047 666F6C6C6F77656420-
    18 00000050 62792077732E204166-
    18 00000059 74657220746865206C-
    18 00000062 617374206E756D6265-
    18 0000006B 722C20707265737320-
    18 00000074 777320666F6C6C6F77-
    18 0000007D 656420627920435452-
    18 00000086 4C202B20443A200A00 
    19                                  
    20 0000008F 5468616E6B20796F75-     receive_input_msg db "Thank you. The numbers in the array are: ", 10, 0
    20 00000098 2E20546865206E756D-
    20 000000A1 6265727320696E2074-
    20 000000AA 686520617272617920-
    20 000000B3 6172653A200A00     
    21                                  
    22 000000BA 5468652073756D206F-     sum_msg db "The sum of the numbers in the array is %lf", 10, 0
    22 000000C3 6620746865206E756D-
    22 000000CC 6265727320696E2074-
    22 000000D5 686520617272617920-
    22 000000DE 697320256C660A00   
    23                                  
    24 000000E6 5468616E6B20796F75-     end_msg db "Thank you for using Array Management System.", 10, 0
    24 000000EF 20666F72207573696E-
    24 000000F8 67204172726179204D-
    24 00000101 616E6167656D656E74-
    24 0000010A 2053797374656D2E0A-
    24 00000113 00                 
    25                                  
    26 00000114 256C6600                floatform db "%lf", 0
    27 00000118 257300                  stringform db "%s", 0
    28                                  
    29                                  segment .bss
    30 00000000 <res 00000040>          array resq max_size ; array is a number where cell 0 starts in memory
    31                                  
    32                                  segment .text
    33                                  manage:
    34                                  
    35                                  ; ============= Backup GPRs ============================
    36 00000000 55                      push rbp
    37 00000001 4889E5                  mov rbp, rsp
    38 00000004 53                      push rbx
    39 00000005 51                      push rcx
    40 00000006 52                      push rdx
    41 00000007 56                      push rsi
    42 00000008 57                      push rdi
    43 00000009 4150                    push r8
    44 0000000B 4151                    push r9
    45 0000000D 4152                    push r10
    46 0000000F 4153                    push r11
    47 00000011 4154                    push r12
    48 00000013 4155                    push r13
    49 00000015 4156                    push r14
    50 00000017 4157                    push r15
    51 00000019 9C                      pushf
    52                                  
    53                                  ; =============== Print welcome_msg =====================
    54 0000001A B800000000              mov rax, 0
    55 0000001F 48BF-                   mov rdi, stringform
    55 00000021 [1801000000000000] 
    56 00000029 48BE-                   mov rsi, welcome_msg
    56 0000002B [0000000000000000] 
    57 00000033 E8(00000000)            call printf
    58                                  
    59                                  ; =============== Print input_msg =======================
    60 00000038 B800000000              mov rax, 0
    61 0000003D 48BF-                   mov rdi, stringform
    61 0000003F [1801000000000000] 
    62 00000047 48BE-                   mov rsi, input_msg
    62 00000049 [2C00000000000000] 
    63 00000051 E8(00000000)            call printf
    64                                  
    65                                  ; =============== Call fill_array =======================
    66 00000056 B800000000              mov rax, 0
    67 0000005B 48BF-                   mov rdi, array
    67 0000005D [0000000000000000] 
    68 00000065 BE08000000              mov rsi, max_size
    69 0000006A E8(00000000)            call fill_array
    70                                  
    71                                  ; =============== Print receive_input_msg ===============
    72 0000006F B800000000              mov rax, 0
    73 00000074 48BF-                   mov rdi, stringform
    73 00000076 [1801000000000000] 
    74 0000007E 48BE-                   mov rsi, receive_input_msg
    74 00000080 [8F00000000000000] 
    75 00000088 E8(00000000)            call printf
    76                                  
    77                                  ; =============== Call output_array =====================
    78                                  
    79                                  ; =============== Call sum_array ========================
    80                                  
    81                                  ; =============== Print sum_msg =========================
    82 0000008D B800000000              mov rax, 0
    83 00000092 48BF-                   mov rdi, stringform
    83 00000094 [1801000000000000] 
    84 0000009C 48BE-                   mov rsi, sum_msg
    84 0000009E [BA00000000000000] 
    85 000000A6 E8(00000000)            call printf
    86                                  
    87                                  ; =============== Print end_msg =========================
    88 000000AB B800000000              mov rax, 0
    89 000000B0 48BF-                   mov rdi, stringform
    89 000000B2 [1801000000000000] 
    90 000000BA 48BE-                   mov rsi, end_msg
    90 000000BC [E600000000000000] 
    91 000000C4 E8(00000000)            call printf
    92                                  
    93                                  ; =============== Restore GPRs ==========================
    94 000000C9 9D                      popf
    95 000000CA 415F                    pop r15
    96 000000CC 415E                    pop r14
    97 000000CE 415D                    pop r13
    98 000000D0 415C                    pop r12
    99 000000D2 415B                    pop r11
   100 000000D4 415A                    pop r10
   101 000000D6 4159                    pop r9
   102 000000D8 4158                    pop r8
   103 000000DA 5F                      pop rdi
   104 000000DB 5E                      pop rsi
   105 000000DC 5A                      pop rdx
   106 000000DD 59                      pop rcx
   107 000000DE 5B                      pop rbx
   108 000000DF 5D                      pop rbp
   109                                  
   110 000000E0 C3                      ret
