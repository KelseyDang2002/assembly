     1                                  ; Program Name: ---
     2                                  ; Subject: CPSC 240-03 <Midterm>
     3                                  ; This program demonstrates passing an array to a called subprogram and sorting it.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: ---
    19                                  ;   Program Languages: ---
    20                                  ;   Due Date: 10/25/23
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This is the director file calls input_array.asm, output_array.c, sortpointers.c in Sort by Pointers.
    25                                  ;   This file gets called by main.cpp.
    26                                  
    27                                  ; File Information
    28                                  ;   Filename: ---
    29                                  ;   Language: x86-64 assembly
    30                                  ;   Compile: nasm -f elf64 -l director.lis -o director.o director.asm
    31                                  ;   Link: g++ -m64 -fno-pie -no-pie -std=c++17 -o a.out main.o director.o input_array.o output_array.o sortpointers.o
    32                                  
    33                                  global rot_left
    34                                  extern printf
    35                                  
    36                                  segment .data
    37 00000000 726F745F6C6566743A-     debug_msg db "rot_left: test call", 10, 0
    37 00000009 20746573742063616C-
    37 00000012 6C0A00             
    38                                  
    39 00000015 256C6600                floatform db "%lf", 0
    40 00000019 257300                  stringform db "%s", 0
    41                                  
    42                                  segment .bss
    43                                  align 64
    44 00000000 <res 00000340>          backuparea resb 832
    45                                  
    46                                  segment .text
    47                                  rot_left:
    48                                  
    49                                  ; ============= Backup GPRs ============================
    50 00000000 55                      push rbp
    51 00000001 4889E5                  mov rbp, rsp
    52 00000004 53                      push rbx
    53 00000005 51                      push rcx
    54 00000006 52                      push rdx
    55 00000007 56                      push rsi
    56 00000008 57                      push rdi
    57 00000009 4150                    push r8
    58 0000000B 4151                    push r9
    59 0000000D 4152                    push r10
    60 0000000F 4153                    push r11
    61 00000011 4154                    push r12
    62 00000013 4155                    push r13
    63 00000015 4156                    push r14
    64 00000017 4157                    push r15
    65 00000019 9C                      pushf
    66                                  
    67                                  ; Print debug_msg
    68 0000001A B800000000              mov rax, 0
    69 0000001F 48BF-                   mov rdi, stringform
    69 00000021 [1900000000000000] 
    70 00000029 48BE-                   mov rsi, debug_msg
    70 0000002B [0000000000000000] 
    71 00000033 E8(00000000)            call printf
    72                                  
    73                                  ; Backup r14 and r15
    74 00000038 4989FE                  mov r14, rdi
    75 0000003B 4989F7                  mov r15, rsi
    76 0000003E 41BD00000000            mov r13, 0
    77                                  
    78                                  ; =============== Restore GPRs ==========================
    79 00000044 9D                      popf
    80 00000045 415F                    pop r15
    81 00000047 415E                    pop r14
    82 00000049 415D                    pop r13
    83 0000004B 415C                    pop r12
    84 0000004D 415B                    pop r11
    85 0000004F 415A                    pop r10
    86 00000051 4159                    pop r9
    87 00000053 4158                    pop r8
    88 00000055 5F                      pop rdi
    89 00000056 5E                      pop rsi
    90 00000057 5A                      pop rdx
    91 00000058 59                      pop rcx
    92 00000059 5B                      pop rbx
    93 0000005A 5D                      pop rbp
    94                                  
    95 0000005B C3                      ret
