     1                                  ; Program Name: ---
     2                                  ; Subject: CPSC 240-03 <Midterm>
     3                                  ; This program demonstrates passing an array to a called subprogram and sorting it.
     4                                  
     5                                  ; Copyright (C) 2023 Kelsey Dang
     6                                  
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
     8                                  ; License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it
     9                                  ; will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    10                                  ; PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public
    11                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  
    13                                  ; Author Information
    14                                  ;   Author: Kelsey Dang
    15                                  ;   Email: kdangdo2002@csu.fullerton.edu
    16                                  ;
    17                                  ; Program Information
    18                                  ;   Program Name: ---
    19                                  ;   Program Languages: ---
    20                                  ;   Due Date: 10/25/23
    21                                  ;   Operating System: Tuffix VM on Windows 10 computer
    22                                  
    23                                  ; Purpose
    24                                  ;   This is the director file calls input_array.asm, output_array.c, sortpointers.c in Sort by Pointers.
    25                                  ;   This file gets called by main.cpp.
    26                                  
    27                                  ; File Information
    28                                  ;   Filename: ---
    29                                  ;   Language: x86-64 assembly
    30                                  ;   Compile: nasm -f elf64 -l director.lis -o director.o director.asm
    31                                  ;   Link: g++ -m64 -fno-pie -no-pie -std=c++17 -o a.out main.o director.o input_array.o output_array.o sortpointers.o
    32                                  
    33                                  extern output_array
    34                                  extern printf
    35                                  
    36                                  segment .data
    37 00000000 256C662000              output_data db "%lf ", 0
    38                                  
    39 00000005 256C6600                floatform db "%lf", 0
    40 00000009 257300                  stringform db "%s", 0
    41                                  
    42                                  segment .bss
    43                                  align 64
    44 00000000 <res 00000340>          backuparea resb 832
    45                                  
    46                                  segment .text
    47                                  output_array:
    48                                  
    49                                  ; ============= Backup GPRs ============================
    50 00000000 55                      push rbp
    51 00000001 4889E5                  mov rbp, rsp
    52 00000004 53                      push rbx
    53 00000005 51                      push rcx
    54 00000006 52                      push rdx
    55 00000007 56                      push rsi
    56 00000008 57                      push rdi
    57 00000009 4150                    push r8
    58 0000000B 4151                    push r9
    59 0000000D 4152                    push r10
    60 0000000F 4153                    push r11
    61 00000011 4154                    push r12
    62 00000013 4155                    push r13
    63 00000015 4156                    push r14
    64 00000017 4157                    push r15
    65 00000019 9C                      pushf
    66                                  
    67                                  ; Backup r14 and r15
    68 0000001A 4989FE                  mov r14, rdi
    69 0000001D 4989F7                  mov r15, rsi
    70 00000020 41BD00000000            mov r13, 0
    71                                  
    72                                  ; Print data of array
    73 00000026 4D31ED                  xor r13, r13
    74                                  
    75                                  beginloop:
    76 00000029 4D39FD                  cmp r13, r15
    77 0000002C 741F                    je endloop
    78                                  
    79 0000002E F2430F1004EE            movsd xmm0, [r14+8*r13]
    80 00000034 B801000000              mov rax, 1
    81 00000039 48BF-                   mov rdi, output_data
    81 0000003B [0000000000000000] 
    82 00000043 E8(00000000)            call printf
    83                                  
    84 00000048 49FFC5                  inc r13
    85 0000004B EBDC                    jmp beginloop
    86                                  
    87                                  endloop:
    88 0000004D 4C89E8                  mov rax, r13
    89                                  
    90                                  ; =============== Restore GPRs ==========================
    91 00000050 9D                      popf
    92 00000051 415F                    pop r15
    93 00000053 415E                    pop r14
    94 00000055 415D                    pop r13
    95 00000057 415C                    pop r12
    96 00000059 415B                    pop r11
    97 0000005B 415A                    pop r10
    98 0000005D 4159                    pop r9
    99 0000005F 4158                    pop r8
   100 00000061 5F                      pop rdi
   101 00000062 5E                      pop rsi
   102 00000063 5A                      pop rdx
   103 00000064 59                      pop rcx
   104 00000065 5B                      pop rbx
   105 00000066 5D                      pop rbp
   106                                  
   107 00000067 C3                      ret
